
main.elf:     file format elf32-msp430

SYMBOL TABLE:
0000c000 l    d  .text	00000000 .text
0000cf8e l    d  .rodata	00000000 .rodata
00000200 l    d  .data	00000000 .data
00000208 l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 main.c
0000c082 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 UART.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
0000c410 l     F .text	00000292 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000057 g       *ABS*	00000000 __BCSCTL1
0000005a g       *ABS*	00000000 __CACTL2
0000c356 g     F .text	00000004 UART_Data_Ready
00000008 g       *ABS*	00000000 __data_size
00000166 g       *ABS*	00000000 __TA0CCTL2
0000c082  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
00000192 g       *ABS*	00000000 __TA1CCR0
00000042 g       *ABS*	00000000 __P2SEL2
00000024 g       *ABS*	00000000 __P1IES
00000069 g       *ABS*	00000000 __UCB0CTL1
0000c082  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00000060 g       *ABS*	00000000 __UCA0CTL0
0000ca02 g     F .text	00000090 __fixsfsi
00000000 g       .vectors	00000000 _efartext
00000176 g       *ABS*	00000000 __TA0CCR2
00000001 g       *ABS*	00000000 __IE2
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
0000d0aa g       *ABS*	00000000 _etext
000010f8 g       *ABS*	00000000 __CALDCO_16MHZ
0000c0aa g     F .text	0000004c UART_Init
0000c6ee g     F .text	00000050 __subsf3
00000000 g       *ABS*	00000000 __bss_size
000010fd g       *ABS*	00000000 __CALBC1_8MHZ
0000c000  w      .text	00000000 __watchdog_support
0000c07c  w      .text	00000000 __stop_progExec__
00000172 g       *ABS*	00000000 __TA0CCR0
0000002d g       *ABS*	00000000 __P2IE
0000c286 g     F .text	000000a0 UART_Write_Float
0000c082  w      .text	00000000 __isr_11
00000160 g       *ABS*	00000000 __TA0CTL
0000c38e g     F .text	00000000 __udivsi3
00000025 g       *ABS*	00000000 __P1IE
0000006b g       *ABS*	00000000 __UCB0BR1
00000164 g       *ABS*	00000000 __TA0CCTL1
00000049 g       *ABS*	00000000 __ADC10DTC1
00000190 g       *ABS*	00000000 __TA1R
00000066 g       *ABS*	00000000 __UCA0RXBUF
00000061 g       *ABS*	00000000 __UCA0CTL1
00000170 g       *ABS*	00000000 __TA0R
0000c12c g     F .text	000000d4 UART_Write_Int
00000180 g       *ABS*	00000000 __TA1CTL
0000006d g       *ABS*	00000000 __UCB0STAT
0000c082  w      .text	00000000 __isr_5
00000063 g       *ABS*	00000000 __UCA0BR1
0000d0aa g       *ABS*	00000000 __data_load_start
0000c082 g       .text	00000000 __dtors_end
00000053 g       *ABS*	00000000 __BCSCTL3
000001bc g       *ABS*	00000000 __ADC10SA
00000065 g       *ABS*	00000000 __UCA0STAT
0000c082  w      .text	00000000 __isr_2
0000012c g       *ABS*	00000000 __FCTL3
0000c082  w      .text	00000000 __isr_10
0000002e g       *ABS*	00000000 __P2SEL
000010f9 g       *ABS*	00000000 __CALBC1_16MHZ
0000012e g       *ABS*	00000000 __TA0IV
00000023 g       *ABS*	00000000 __P1IFG
000010fb g       *ABS*	00000000 __CALBC1_12MHZ
0000cdc4 g     F .text	00000124 __unpack_f
00000182 g       *ABS*	00000000 __TA1CCTL0
0000004a g       *ABS*	00000000 __ADC10AE0
0000011a g       *ABS*	00000000 __UCB0I2CSA
00000056 g       *ABS*	00000000 __DCOCTL
00000204 g     O .data	00000004 SMCLK_F
00000003 g       *ABS*	00000000 __IFG2
00000208 g     O .noinit	00000002 __wdt_clear_value
0000001b g       *ABS*	00000000 __P3SEL
0000c35a g       .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
0000006c g       *ABS*	00000000 __UCB0I2CIE
0000006a g       *ABS*	00000000 __UCB0BR0
0000c3c4 g     F .text	00000000 __umodsi3
00000028 g       *ABS*	00000000 __P2IN
0000cbe6 g     F .text	000001de __pack_f
00000118 g       *ABS*	00000000 __UCB0I2COA
000001b4 g       *ABS*	00000000 __ADC10MEM
0000005b g       *ABS*	00000000 __CAPD
0000c082  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
0000cb74 g     F .text	00000072 __clzsi2
00000064 g       *ABS*	00000000 __UCA0MCTL
00000043 g       *ABS*	00000000 __P3SEL2
0000c028  w      .text	00000000 __do_clear_bss
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
00000026 g       *ABS*	00000000 __P1SEL
0000c086 g     F .text	00000024 calcFCS
00000200 g     O .data	00000004 BAUDRATE
0000c38e g       .text	00000000 __ext_udivmod32
00000027 g       *ABS*	00000000 __P1REN
0000cf8c  w      .text	00000000 _unexpected_
0000c082  w      .text	00000000 __isr_8
0000011e g       *ABS*	00000000 __TA1IV
0000c082  w      .text	00000000 __isr_3
000010fc g       *ABS*	00000000 __CALDCO_8MHZ
0000c000  w      .text	00000000 _reset_vector__
0000c082 g       .text	00000000 __ctors_start
0000c082  w      .text	00000000 __isr_12
000010fa g       *ABS*	00000000 __CALDCO_12MHZ
0000cfa2 g     O .rodata	00000008 __thenan_sf
00000018 g       *ABS*	00000000 __P3IN
0000c010  w      .text	00000000 __do_copy_data
00000162 g       *ABS*	00000000 __TA0CCTL0
00000208 g       .data	00000000 __bss_start
0000c03e g     F .text	0000003e main
0000c104 g     F .text	00000028 UART_Write_String
0000c082  w      .text	00000000 __isr_13
0000c9b2 g     F .text	00000050 __ltsf2
00010000 g       .vectors	00000000 _vectors_end
0000c73e g     F .text	00000224 __mulsf3
0000002a g       *ABS*	00000000 __P2DIR
00000174 g       *ABS*	00000000 __TA0CCR1
00000186 g       *ABS*	00000000 __TA1CCTL2
00000068 g       *ABS*	00000000 __UCB0CTL0
0000002f g       *ABS*	00000000 __P2REN
0000cfaa g     O .rodata	00000100 __clz_tab
0000c962 g     F .text	00000050 __gesf2
0000006e g       *ABS*	00000000 __UCB0RXBUF
000001b0 g       *ABS*	00000000 __ADC10CTL0
0000c334 g     F .text	00000022 UART_Read_String
0000c0f6 g     F .text	0000000e UART_Write_Char
0000c082  w      .text	00000000 __isr_9
0000005e g       *ABS*	00000000 __UCA0IRTCTL
000010fe g       *ABS*	00000000 __CALDCO_1MHZ
00000184 g       *ABS*	00000000 __TA1CCTL1
00000067 g       *ABS*	00000000 __UCA0TXBUF
0000c00c  w      .text	00000000 __init_stack
0000005d g       *ABS*	00000000 __UCA0ABCTL
0000c326 g     F .text	0000000e UART_Read_Char
00000019 g       *ABS*	00000000 __P3OUT
00000196 g       *ABS*	00000000 __TA1CCR2
0000c082 g       .text	00000000 __dtors_start
0000c082  w      .text	00000000 __isr_6
0000c082 g       .text	00000000 __ctors_end
00000194 g       *ABS*	00000000 __TA1CCR1
00000062 g       *ABS*	00000000 __UCA0BR0
00000400 g       *ABS*	00000000 __stack
0000c082  w      .text	00000000 __isr_1
00000208 g       .data	00000000 _edata
0000c200 g     F .text	00000086 UART_Write_Reg
0000020a g       *ABS*	00000000 _end
00000048 g       *ABS*	00000000 __ADC10DTC0
000001b2 g       *ABS*	00000000 __ADC10CTL1
0000c35a g     F .text	00000034 USCI0RX_ISR
0000ca92 g     F .text	000000e2 __floatunsisf
00000058 g       *ABS*	00000000 __BCSCTL2
0000c07c  w      .text	00000000 _endless_loop__
00000041 g       *ABS*	00000000 __P1SEL2
00000022 g       *ABS*	00000000 __P1DIR
0000c3ce g     F .text	00000042 __fixunssfsi
0000cee8 g     F .text	000000a4 __fpcmp_parts_f
0000005f g       *ABS*	00000000 __UCA0IRRCTL
00000010 g       *ABS*	00000000 __P3REN
0000006f g       *ABS*	00000000 __UCB0TXBUF
000010ff g       *ABS*	00000000 __CALBC1_1MHZ
0000c010  w      .text	00000000 __low_level_init
00000200 g       .data	00000000 __data_start
00000120 g       *ABS*	00000000 __WDTCTL
00000000 g       *ABS*	00000000 __IE1
00000059 g       *ABS*	00000000 __CACTL1
00000020 g       *ABS*	00000000 __P1IN
0000c6a2 g     F .text	0000004c __addsf3



Disassembly of section .text:

0000c000 <__watchdog_support>:
    c000:	55 42 20 01 	mov.b	&0x0120,r5	
    c004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    c008:	82 45 08 02 	mov	r5,	&0x0208	

0000c00c <__init_stack>:
    c00c:	31 40 00 04 	mov	#1024,	r1	;#0x0400

0000c010 <__do_copy_data>:
    c010:	3f 40 08 00 	mov	#8,	r15	;#0x0008
    c014:	0f 93       	tst	r15		
    c016:	08 24       	jz	$+18     	;abs 0xc028
    c018:	92 42 08 02 	mov	&0x0208,&0x0120	
    c01c:	20 01 
    c01e:	2f 83       	decd	r15		
    c020:	9f 4f aa d0 	mov	-12118(r15),512(r15);0xd0aa(r15), 0x0200(r15)
    c024:	00 02 
    c026:	f8 23       	jnz	$-14     	;abs 0xc018

0000c028 <__do_clear_bss>:
    c028:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    c02c:	0f 93       	tst	r15		
    c02e:	07 24       	jz	$+16     	;abs 0xc03e
    c030:	92 42 08 02 	mov	&0x0208,&0x0120	
    c034:	20 01 
    c036:	1f 83       	dec	r15		
    c038:	cf 43 08 02 	mov.b	#0,	520(r15);r3 As==00, 0x0208(r15)
    c03c:	f9 23       	jnz	$-12     	;abs 0xc030

0000c03e <main>:
#include <msp430g2553.h>
#include "UART.h"

int main(void)
{
    WDTCTL = WDTPW + WDTHOLD;
    c03e:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    c042:	20 01 
    char *str = "hello";

    // make the LED pin an output for P1.0
    P1DIR |= 0x01;
    c044:	d2 d3 22 00 	bis.b	#1,	&0x0022	;r3 As==01

    UART_Init(9600);
    c048:	3e 40 80 25 	mov	#9600,	r14	;#0x2580
    c04c:	0f 43       	clr	r15		
    c04e:	b0 12 aa c0 	call	#0xc0aa	

    while (1)
    {
        __delay_cycles(1000000);
    c052:	3e 40 06 00 	mov	#6,	r14	;#0x0006
    c056:	3f 40 0e 16 	mov	#5646,	r15	;#0x160e
    c05a:	1f 83       	dec	r15		
    c05c:	fe 23       	jnz	$-2      	;abs 0xc05a
    c05e:	1e 83       	dec	r14		
    c060:	fc 23       	jnz	$-6      	;abs 0xc05a
        // toggle the LED
        // P1OUT ^= 0x01;
        UART_Write_String(str);
    c062:	3f 40 9b cf 	mov	#-12389,r15	;#0xcf9b
    c066:	b0 12 04 c1 	call	#0xc104	
         __delay_cycles(1000000);
    c06a:	3e 40 06 00 	mov	#6,	r14	;#0x0006
    c06e:	3f 40 0e 16 	mov	#5646,	r15	;#0x160e
    c072:	1f 83       	dec	r15		
    c074:	fe 23       	jnz	$-2      	;abs 0xc072
    c076:	1e 83       	dec	r14		
    c078:	fc 23       	jnz	$-6      	;abs 0xc072
    c07a:	eb 3f       	jmp	$-40     	;abs 0xc052

0000c07c <__stop_progExec__>:
    c07c:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    c080:	fd 3f       	jmp	$-4      	;abs 0xc07c

0000c082 <__ctors_end>:
    c082:	30 40 8c cf 	br	#0xcf8c	

0000c086 <calcFCS>:

// FCS calculation function

unsigned char calcFCS(unsigned char *pMsg, unsigned char len) {
	unsigned char result = 0;
	while (len--) {
    c086:	4e 93       	tst.b	r14		
    c088:	0e 24       	jz	$+30     	;abs 0xc0a6
*					Function (noi dung ham)	                           *
\******************************************************************************/

// FCS calculation function

unsigned char calcFCS(unsigned char *pMsg, unsigned char len) {
    c08a:	0d 4f       	mov	r15,	r13	
    c08c:	1d 53       	inc	r13		
	unsigned char result = 0;
	while (len--) {
    c08e:	7e 53       	add.b	#-1,	r14	;r3 As==11
*					Function (noi dung ham)	                           *
\******************************************************************************/

// FCS calculation function

unsigned char calcFCS(unsigned char *pMsg, unsigned char len) {
    c090:	4e 4e       	mov.b	r14,	r14	
    c092:	0e 5d       	add	r13,	r14	
	unsigned char result = 0;
    c094:	4c 43       	clr.b	r12		
    c096:	01 3c       	jmp	$+4      	;abs 0xc09a
    c098:	1d 53       	inc	r13		
	while (len--) {
		result ^= *pMsg++;
    c09a:	6c ef       	xor.b	@r15,	r12	
    c09c:	0f 4d       	mov	r13,	r15	

// FCS calculation function

unsigned char calcFCS(unsigned char *pMsg, unsigned char len) {
	unsigned char result = 0;
	while (len--) {
    c09e:	0d 9e       	cmp	r14,	r13	
    c0a0:	fb 23       	jnz	$-8      	;abs 0xc098
		result ^= *pMsg++;
	}
	return result;
}
    c0a2:	4f 4c       	mov.b	r12,	r15	
    c0a4:	30 41       	ret			
\******************************************************************************/

// FCS calculation function

unsigned char calcFCS(unsigned char *pMsg, unsigned char len) {
	unsigned char result = 0;
    c0a6:	4c 43       	clr.b	r12		
    c0a8:	fc 3f       	jmp	$-6      	;abs 0xc0a2

0000c0aa <UART_Init>:

//Init UART
void UART_Init(unsigned long BAUDRATE)
{
	unsigned int tempfactor;
	WDTCTL = WDTPW + WDTHOLD; 					// Stop WDT
    c0aa:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    c0ae:	20 01 
	P1SEL |= BIT1 + BIT2 ; 						// P1.1 = RXD, P1.2=TXD
    c0b0:	f2 d0 06 00 	bis.b	#6,	&0x0026	;#0x0006
    c0b4:	26 00 
	P1SEL2 |= BIT1 + BIT2;
    c0b6:	f2 d0 06 00 	bis.b	#6,	&0x0041	;#0x0006
    c0ba:	41 00 
	UCA0CTL0 =0 ;								//Tat Parity ,LSB first,8-bit data,one stop bits
    c0bc:	c2 43 60 00 	mov.b	#0,	&0x0060	;r3 As==00
	UCA0CTL1 |= UCSSEL_2; 						// SMCLK
    c0c0:	f2 d0 80 ff 	bis.b	#-128,	&0x0061	;#0xff80
    c0c4:	61 00 

 	tempfactor = SMCLK_F/BAUDRATE;
    c0c6:	0c 4e       	mov	r14,	r12	
    c0c8:	0d 4f       	mov	r15,	r13	
    c0ca:	1e 42 04 02 	mov	&0x0204,r14	
    c0ce:	1f 42 06 02 	mov	&0x0206,r15	
    c0d2:	b0 12 8e c3 	call	#0xc38e	
    UCA0BR0 = (unsigned char) tempfactor&0x00FF;
    c0d6:	c2 4e 62 00 	mov.b	r14,	&0x0062	
    tempfactor >>= 8;
    c0da:	8e 10       	swpb	r14		
    c0dc:	4e 4e       	mov.b	r14,	r14	
    UCA0BR1 = (unsigned char) (tempfactor&0x00FF);
    c0de:	c2 4e 63 00 	mov.b	r14,	&0x0063	
    UCA0MCTL |=UCBRS_5;							// Modulation UCBRSx = 5
    c0e2:	f2 d0 0a 00 	bis.b	#10,	&0x0064	;#0x000a
    c0e6:	64 00 
	UCA0CTL1 &=~ UCSWRST; 						// **Initialize USCI state machine**
    c0e8:	f2 f0 fe ff 	and.b	#-2,	&0x0061	;#0xfffe
    c0ec:	61 00 
	IE2 |= UCA0RXIE; 							// Enable USCI_A0 RX interrupt
    c0ee:	d2 d3 01 00 	bis.b	#1,	&0x0001	;r3 As==01
	__bis_SR_register(GIE); 					// Interrupts enabled
    c0f2:	32 d2       	eint			
}
    c0f4:	30 41       	ret			

0000c0f6 <UART_Write_Char>:
// Transfer  UART
//*****************************************************************************
//In KyTu
void UART_Write_Char(unsigned char data)
{
	while (!(IFG2&UCA0TXIFG)); 					// Doi gui xong ky tu truoc
    c0f6:	5e 42 03 00 	mov.b	&0x0003,r14	
    c0fa:	2e f3       	and	#2,	r14	;r3 As==10
    c0fc:	fc 27       	jz	$-6      	;abs 0xc0f6
	UCA0TXBUF= data; 							// Moi cho phep gui ky tu tiep theo
    c0fe:	c2 4f 67 00 	mov.b	r15,	&0x0067	
}
    c102:	30 41       	ret			

0000c104 <UART_Write_String>:
/////////////////////////////////////////
//In Xau
void UART_Write_String(char* string)
{
	while(*string) 								// Het chuoi ky tu thi thoat
    c104:	6d 4f       	mov.b	@r15,	r13	
    c106:	4d 93       	tst.b	r13		
    c108:	0a 24       	jz	$+22     	;abs 0xc11e
		{
		while (!(IFG2&UCA0TXIFG)); 				// Doi gui xong ky tu truoc
    c10a:	5e 42 03 00 	mov.b	&0x0003,r14	
    c10e:	2e f3       	and	#2,	r14	;r3 As==10
    c110:	fc 27       	jz	$-6      	;abs 0xc10a
		UCA0TXBUF= *string; 					// Moi cho phep gui ky tu tiep theo
    c112:	c2 4d 67 00 	mov.b	r13,	&0x0067	
		string ++; 								// Lay ky tu tiep theo
    c116:	1f 53       	inc	r15		
}
/////////////////////////////////////////
//In Xau
void UART_Write_String(char* string)
{
	while(*string) 								// Het chuoi ky tu thi thoat
    c118:	6d 4f       	mov.b	@r15,	r13	
    c11a:	4d 93       	tst.b	r13		
    c11c:	f6 23       	jnz	$-18     	;abs 0xc10a
// Transfer  UART
//*****************************************************************************
//In KyTu
void UART_Write_Char(unsigned char data)
{
	while (!(IFG2&UCA0TXIFG)); 					// Doi gui xong ky tu truoc
    c11e:	5f 42 03 00 	mov.b	&0x0003,r15	
    c122:	2f f3       	and	#2,	r15	;r3 As==10
    c124:	fc 27       	jz	$-6      	;abs 0xc11e
	UCA0TXBUF= data; 							// Moi cho phep gui ky tu tiep theo
    c126:	c2 43 67 00 	mov.b	#0,	&0x0067	;r3 As==00
		while (!(IFG2&UCA0TXIFG)); 				// Doi gui xong ky tu truoc
		UCA0TXBUF= *string; 					// Moi cho phep gui ky tu tiep theo
		string ++; 								// Lay ky tu tiep theo
		}
	UART_Write_Char(0);
}
    c12a:	30 41       	ret			

0000c12c <UART_Write_Int>:


void UART_Write_Int(unsigned long n)
{
    c12c:	0b 12       	push	r11		
    c12e:	0a 12       	push	r10		
    c130:	09 12       	push	r9		
    c132:	08 12       	push	r8		
    c134:	31 50 f0 ff 	add	#-16,	r1	;#0xfff0
    c138:	0b 4e       	mov	r14,	r11	
    c13a:	0a 4f       	mov	r15,	r10	
     unsigned char buffer[16];
     unsigned char i,j;

     if(n == 0) {
    c13c:	0e 93       	tst	r14		
    c13e:	02 20       	jnz	$+6      	;abs 0xc144
    c140:	0f 93       	tst	r15		
    c142:	36 24       	jz	$+110    	;abs 0xc1b0
    	 UART_Write_Char('0');
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
          buffer[i] = (n%10)+'0';
    c144:	3c 40 0a 00 	mov	#10,	r12	;#0x000a
    c148:	0d 43       	clr	r13		
    c14a:	0e 4b       	mov	r11,	r14	
    c14c:	0f 4a       	mov	r10,	r15	
    c14e:	b0 12 c4 c3 	call	#0xc3c4	
    c152:	7e 50 30 00 	add.b	#48,	r14	;#0x0030
    c156:	c1 4e 0f 00 	mov.b	r14,	15(r1)	;0x000f(r1)
          n /= 10;
    c15a:	3c 40 0a 00 	mov	#10,	r12	;#0x000a
    c15e:	0d 43       	clr	r13		
    c160:	0e 4b       	mov	r11,	r14	
    c162:	0f 4a       	mov	r10,	r15	
    c164:	b0 12 8e c3 	call	#0xc38e	
    c168:	0b 4e       	mov	r14,	r11	
    c16a:	09 4f       	mov	r15,	r9	
    c16c:	0a 41       	mov	r1,	r10	
    c16e:	3a 50 0e 00 	add	#14,	r10	;#0x000e
     if(n == 0) {
    	 UART_Write_Char('0');
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
    c172:	78 40 0e 00 	mov.b	#14,	r8	;#0x000e
    c176:	0b 93       	tst	r11		
    c178:	29 20       	jnz	$+84     	;abs 0xc1cc
    c17a:	09 93       	tst	r9		
    c17c:	27 20       	jnz	$+80     	;abs 0xc1cc
          buffer[i] = (n%10)+'0';
          n /= 10;
     }

     for(j = i+1; j <= 15; j++) {
    c17e:	4e 48       	mov.b	r8,	r14	
    c180:	5e 53       	inc.b	r14		
    c182:	7e 90 10 00 	cmp.b	#16,	r14	;#0x0010
    c186:	1b 24       	jz	$+56     	;abs 0xc1be
    	 UART_Write_Char(buffer[j]);
    c188:	4f 4e       	mov.b	r14,	r15	
    c18a:	0f 51       	add	r1,	r15	
    c18c:	6d 4f       	mov.b	@r15,	r13	
// Transfer  UART
//*****************************************************************************
//In KyTu
void UART_Write_Char(unsigned char data)
{
	while (!(IFG2&UCA0TXIFG)); 					// Doi gui xong ky tu truoc
    c18e:	5f 42 03 00 	mov.b	&0x0003,r15	
    c192:	2f f3       	and	#2,	r15	;r3 As==10
    c194:	fc 27       	jz	$-6      	;abs 0xc18e
	UCA0TXBUF= data; 							// Moi cho phep gui ky tu tiep theo
    c196:	c2 4d 67 00 	mov.b	r13,	&0x0067	
     for (i = 15; i > 0 && n > 0; i--) {
          buffer[i] = (n%10)+'0';
          n /= 10;
     }

     for(j = i+1; j <= 15; j++) {
    c19a:	5e 53       	inc.b	r14		
    c19c:	7e 90 10 00 	cmp.b	#16,	r14	;#0x0010
    c1a0:	f3 23       	jnz	$-24     	;abs 0xc188
    	 UART_Write_Char(buffer[j]);
     }
}
    c1a2:	31 50 10 00 	add	#16,	r1	;#0x0010
    c1a6:	38 41       	pop	r8		
    c1a8:	39 41       	pop	r9		
    c1aa:	3a 41       	pop	r10		
    c1ac:	3b 41       	pop	r11		
    c1ae:	30 41       	ret			
// Transfer  UART
//*****************************************************************************
//In KyTu
void UART_Write_Char(unsigned char data)
{
	while (!(IFG2&UCA0TXIFG)); 					// Doi gui xong ky tu truoc
    c1b0:	5f 42 03 00 	mov.b	&0x0003,r15	
    c1b4:	2f f3       	and	#2,	r15	;r3 As==10
    c1b6:	fc 27       	jz	$-6      	;abs 0xc1b0
	UCA0TXBUF= data; 							// Moi cho phep gui ky tu tiep theo
    c1b8:	f2 40 30 00 	mov.b	#48,	&0x0067	;#0x0030
    c1bc:	67 00 
     }

     for(j = i+1; j <= 15; j++) {
    	 UART_Write_Char(buffer[j]);
     }
}
    c1be:	31 50 10 00 	add	#16,	r1	;#0x0010
    c1c2:	38 41       	pop	r8		
    c1c4:	39 41       	pop	r9		
    c1c6:	3a 41       	pop	r10		
    c1c8:	3b 41       	pop	r11		
    c1ca:	30 41       	ret			
    	 UART_Write_Char('0');
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
          buffer[i] = (n%10)+'0';
    c1cc:	3c 40 0a 00 	mov	#10,	r12	;#0x000a
    c1d0:	0d 43       	clr	r13		
    c1d2:	0e 4b       	mov	r11,	r14	
    c1d4:	0f 49       	mov	r9,	r15	
    c1d6:	b0 12 c4 c3 	call	#0xc3c4	
    c1da:	7e 50 30 00 	add.b	#48,	r14	;#0x0030
    c1de:	ca 4e 00 00 	mov.b	r14,	0(r10)	;0x0000(r10)
          n /= 10;
    c1e2:	3c 40 0a 00 	mov	#10,	r12	;#0x000a
    c1e6:	0d 43       	clr	r13		
    c1e8:	0e 4b       	mov	r11,	r14	
    c1ea:	0f 49       	mov	r9,	r15	
    c1ec:	b0 12 8e c3 	call	#0xc38e	
    c1f0:	0b 4e       	mov	r14,	r11	
    c1f2:	09 4f       	mov	r15,	r9	
     if(n == 0) {
    	 UART_Write_Char('0');
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
    c1f4:	78 53       	add.b	#-1,	r8	;r3 As==11
    c1f6:	3a 53       	add	#-1,	r10	;r3 As==11
    c1f8:	48 93       	tst.b	r8		
    c1fa:	bd 23       	jnz	$-132    	;abs 0xc176
          buffer[i] = (n%10)+'0';
          n /= 10;
     }

     for(j = i+1; j <= 15; j++) {
    c1fc:	5e 43       	mov.b	#1,	r14	;r3 As==01
    c1fe:	c4 3f       	jmp	$-118    	;abs 0xc188

0000c200 <UART_Write_Reg>:
    	 UART_Write_Char(buffer[j]);
     }
}
//Gui ma bit
void UART_Write_Reg(char *name, int n)
{
    c200:	0b 12       	push	r11		
    c202:	0a 12       	push	r10		
    c204:	0a 4f       	mov	r15,	r10	
    c206:	0b 4e       	mov	r14,	r11	
	int size = 8;
   int i;

	UART_Write_String((char *)"- ");
    c208:	3f 40 8e cf 	mov	#-12402,r15	;#0xcf8e
    c20c:	b0 12 04 c1 	call	#0xc104	
	UART_Write_String(name);
    c210:	0f 4a       	mov	r10,	r15	
    c212:	b0 12 04 c1 	call	#0xc104	
	UART_Write_String((char *)": ");
    c216:	3f 40 91 cf 	mov	#-12399,r15	;#0xcf91
    c21a:	b0 12 04 c1 	call	#0xc104	

	int mask = 1 << (size - 1);

	for(i = 0; i < size; i++) {
    c21e:	0d 43       	clr	r13		
	   if((n & (mask >> i)) != 0) {
    c220:	3f 40 80 00 	mov	#128,	r15	;#0x0080
    c224:	4c 4d       	mov.b	r13,	r12	
    c226:	7c f0 0f 00 	and.b	#15,	r12	;#0x000f
    c22a:	03 24       	jz	$+8      	;abs 0xc232
    c22c:	0f 11       	rra	r15		
    c22e:	7c 53       	add.b	#-1,	r12	;r3 As==11
    c230:	fd 23       	jnz	$-4      	;abs 0xc22c
    c232:	0f bb       	bit	r11,	r15	
    c234:	1d 24       	jz	$+60     	;abs 0xc270
// Transfer  UART
//*****************************************************************************
//In KyTu
void UART_Write_Char(unsigned char data)
{
	while (!(IFG2&UCA0TXIFG)); 					// Doi gui xong ky tu truoc
    c236:	5f 42 03 00 	mov.b	&0x0003,r15	
    c23a:	2f f3       	and	#2,	r15	;r3 As==10
    c23c:	fc 27       	jz	$-6      	;abs 0xc236
	UCA0TXBUF= data; 							// Moi cho phep gui ky tu tiep theo
    c23e:	f2 40 31 00 	mov.b	#49,	&0x0067	;#0x0031
    c242:	67 00 
	UART_Write_String(name);
	UART_Write_String((char *)": ");

	int mask = 1 << (size - 1);

	for(i = 0; i < size; i++) {
    c244:	1d 53       	inc	r13		
    c246:	3d 92       	cmp	#8,	r13	;r2 As==11
    c248:	eb 23       	jnz	$-40     	;abs 0xc220
	  	 UART_Write_Char('1');
	   } else {
	  	 UART_Write_Char('0');
	   }
	}
	UART_Write_String(" (");
    c24a:	3f 40 94 cf 	mov	#-12396,r15	;#0xcf94
    c24e:	b0 12 04 c1 	call	#0xc104	
	UART_Write_Int(n);
    c252:	0f 4b       	mov	r11,	r15	
    c254:	8f 10       	swpb	r15		
    c256:	8f 11       	sxt	r15		
    c258:	8f 10       	swpb	r15		
    c25a:	8f 11       	sxt	r15		
    c25c:	0e 4b       	mov	r11,	r14	
    c25e:	b0 12 2c c1 	call	#0xc12c	
	UART_Write_String(")\n\r");
    c262:	3f 40 97 cf 	mov	#-12393,r15	;#0xcf97
    c266:	b0 12 04 c1 	call	#0xc104	
}
    c26a:	3a 41       	pop	r10		
    c26c:	3b 41       	pop	r11		
    c26e:	30 41       	ret			
// Transfer  UART
//*****************************************************************************
//In KyTu
void UART_Write_Char(unsigned char data)
{
	while (!(IFG2&UCA0TXIFG)); 					// Doi gui xong ky tu truoc
    c270:	5f 42 03 00 	mov.b	&0x0003,r15	
    c274:	2f f3       	and	#2,	r15	;r3 As==10
    c276:	fc 27       	jz	$-6      	;abs 0xc270
	UCA0TXBUF= data; 							// Moi cho phep gui ky tu tiep theo
    c278:	f2 40 30 00 	mov.b	#48,	&0x0067	;#0x0030
    c27c:	67 00 
	UART_Write_String(name);
	UART_Write_String((char *)": ");

	int mask = 1 << (size - 1);

	for(i = 0; i < size; i++) {
    c27e:	1d 53       	inc	r13		
    c280:	3d 92       	cmp	#8,	r13	;r2 As==11
    c282:	ce 23       	jnz	$-98     	;abs 0xc220
    c284:	e2 3f       	jmp	$-58     	;abs 0xc24a

0000c286 <UART_Write_Float>:
}


//In ra man hinh so thuc x voi so cho hien thi = length, so chu so sau dau phay la coma
void UART_Write_Float(float x, unsigned char coma)
{
    c286:	0b 12       	push	r11		
    c288:	09 12       	push	r9		
    c28a:	08 12       	push	r8		
    c28c:	07 12       	push	r7		
    c28e:	06 12       	push	r6		
    c290:	08 4e       	mov	r14,	r8	
    c292:	09 4f       	mov	r15,	r9	
    c294:	4b 4d       	mov.b	r13,	r11	
    c296:	7d 90 05 00 	cmp.b	#5,	r13	;#0x0005
    c29a:	01 28       	jnc	$+4      	;abs 0xc29e
    c29c:	6b 42       	mov.b	#4,	r11	;r2 As==10
	unsigned long temp;
	if(coma>4)coma=4;
	// de trong 1 ki tu o dau cho hien thi dau
	if(x<0)
    c29e:	0c 43       	clr	r12		
    c2a0:	0d 43       	clr	r13		
    c2a2:	0e 48       	mov	r8,	r14	
    c2a4:	0f 49       	mov	r9,	r15	
    c2a6:	b0 12 b2 c9 	call	#0xc9b2	
    c2aa:	0f 93       	tst	r15		
    c2ac:	23 38       	jl	$+72     	;abs 0xc2f4
	{
		UART_Write_Char('-');				//In so am
		x*=-1;
	}
	temp = (unsigned long)x;				// Chuyan thanh so nguyen.
    c2ae:	0e 48       	mov	r8,	r14	
    c2b0:	0f 49       	mov	r9,	r15	
    c2b2:	b0 12 ce c3 	call	#0xc3ce	
    c2b6:	06 4e       	mov	r14,	r6	
    c2b8:	07 4f       	mov	r15,	r7	

	UART_Write_Int(temp);
    c2ba:	b0 12 2c c1 	call	#0xc12c	

	x=((float)x-temp);						//*mysqr(10,coma);
    c2be:	0e 46       	mov	r6,	r14	
    c2c0:	0f 47       	mov	r7,	r15	
    c2c2:	b0 12 92 ca 	call	#0xca92	
    c2c6:	0c 4e       	mov	r14,	r12	
    c2c8:	0d 4f       	mov	r15,	r13	
    c2ca:	0e 48       	mov	r8,	r14	
    c2cc:	0f 49       	mov	r9,	r15	
    c2ce:	b0 12 ee c6 	call	#0xc6ee	
	if(coma!=0)UART_Write_Char('.');		// In ra dau "."
    c2d2:	4b 93       	tst.b	r11		
    c2d4:	19 20       	jnz	$+52     	;abs 0xc308
	while(coma>0)
	{
		x*=10;
		coma--;
	}
	temp=(unsigned long)(x+0.5);			//Lam tron
    c2d6:	0c 43       	clr	r12		
    c2d8:	3d 40 00 3f 	mov	#16128,	r13	;#0x3f00
    c2dc:	b0 12 a2 c6 	call	#0xc6a2	
    c2e0:	b0 12 ce c3 	call	#0xc3ce	
	UART_Write_Int(temp);
    c2e4:	b0 12 2c c1 	call	#0xc12c	
}
    c2e8:	36 41       	pop	r6		
    c2ea:	37 41       	pop	r7		
    c2ec:	38 41       	pop	r8		
    c2ee:	39 41       	pop	r9		
    c2f0:	3b 41       	pop	r11		
    c2f2:	30 41       	ret			
// Transfer  UART
//*****************************************************************************
//In KyTu
void UART_Write_Char(unsigned char data)
{
	while (!(IFG2&UCA0TXIFG)); 					// Doi gui xong ky tu truoc
    c2f4:	5f 42 03 00 	mov.b	&0x0003,r15	
    c2f8:	2f f3       	and	#2,	r15	;r3 As==10
    c2fa:	fc 27       	jz	$-6      	;abs 0xc2f4
	UCA0TXBUF= data; 							// Moi cho phep gui ky tu tiep theo
    c2fc:	f2 40 2d 00 	mov.b	#45,	&0x0067	;#0x002d
    c300:	67 00 
	if(coma>4)coma=4;
	// de trong 1 ki tu o dau cho hien thi dau
	if(x<0)
	{
		UART_Write_Char('-');				//In so am
		x*=-1;
    c302:	39 e0 00 80 	xor	#-32768,r9	;#0x8000
    c306:	d3 3f       	jmp	$-88     	;abs 0xc2ae
// Transfer  UART
//*****************************************************************************
//In KyTu
void UART_Write_Char(unsigned char data)
{
	while (!(IFG2&UCA0TXIFG)); 					// Doi gui xong ky tu truoc
    c308:	5d 42 03 00 	mov.b	&0x0003,r13	
    c30c:	2d f3       	and	#2,	r13	;r3 As==10
    c30e:	fc 27       	jz	$-6      	;abs 0xc308
	UCA0TXBUF= data; 							// Moi cho phep gui ky tu tiep theo
    c310:	f2 40 2e 00 	mov.b	#46,	&0x0067	;#0x002e
    c314:	67 00 

	x=((float)x-temp);						//*mysqr(10,coma);
	if(coma!=0)UART_Write_Char('.');		// In ra dau "."
	while(coma>0)
	{
		x*=10;
    c316:	0c 43       	clr	r12		
    c318:	3d 40 20 41 	mov	#16672,	r13	;#0x4120
    c31c:	b0 12 3e c7 	call	#0xc73e	
		coma--;
    c320:	7b 53       	add.b	#-1,	r11	;r3 As==11

	UART_Write_Int(temp);

	x=((float)x-temp);						//*mysqr(10,coma);
	if(coma!=0)UART_Write_Char('.');		// In ra dau "."
	while(coma>0)
    c322:	f9 23       	jnz	$-12     	;abs 0xc316
    c324:	d8 3f       	jmp	$-78     	;abs 0xc2d6

0000c326 <UART_Read_Char>:
//*****************************************************************************
// Receive  UART
//*****************************************************************************
char UART_Read_Char()
{
	while (!(IFG2&UCA0RXIFG)); 				// Doi gui xong ky tu truoc
    c326:	5f 42 03 00 	mov.b	&0x0003,r15	
    c32a:	1f f3       	and	#1,	r15	;r3 As==01
    c32c:	fc 27       	jz	$-6      	;abs 0xc326
	return UCA0RXBUF; 						// Moi cho phep nhan ky tu tiep theo
    c32e:	5f 42 66 00 	mov.b	&0x0066,r15	
}
    c332:	30 41       	ret			

0000c334 <UART_Read_String>:
//*****************************************************************************
// Receive  UART
//*****************************************************************************
char UART_Read_Char()
{
	while (!(IFG2&UCA0RXIFG)); 				// Doi gui xong ky tu truoc
    c334:	5e 42 03 00 	mov.b	&0x0003,r14	
    c338:	1e f3       	and	#1,	r14	;r3 As==01
    c33a:	fc 27       	jz	$-6      	;abs 0xc334
	return UCA0RXBUF; 						// Moi cho phep nhan ky tu tiep theo
    c33c:	5e 42 66 00 	mov.b	&0x0066,r14	
// Wait to receive a string through UART
// Note that the string is ended with '/0' (or 0x00)
//*****************************************************************************
void UART_Read_String(char *s)
{
	*s = UART_Read_Char();
    c340:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
	while(*s!='\0')
    c344:	4e 93       	tst.b	r14		
    c346:	06 24       	jz	$+14     	;abs 0xc354
	{
		s++;
    c348:	1f 53       	inc	r15		
//*****************************************************************************
// Receive  UART
//*****************************************************************************
char UART_Read_Char()
{
	while (!(IFG2&UCA0RXIFG)); 				// Doi gui xong ky tu truoc
    c34a:	5e 42 03 00 	mov.b	&0x0003,r14	
    c34e:	1e f3       	and	#1,	r14	;r3 As==01
    c350:	fc 27       	jz	$-6      	;abs 0xc34a
    c352:	f4 3f       	jmp	$-22     	;abs 0xc33c
    c354:	30 41       	ret			

0000c356 <UART_Data_Ready>:
//*****************************************************************************
char UART_Data_Ready()
{
	if(UCA0RXIFG) return 1;
	else return 0;
}
    c356:	5f 43       	mov.b	#1,	r15	;r3 As==01
    c358:	30 41       	ret			

0000c35a <USCI0RX_ISR>:

//////////////////////////////////////////
#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR(void)
{
    c35a:	0f 12       	push	r15		
    while (!(IFG2 & UCA0TXIFG));              // USCI_A0 TX buffer ready?
    c35c:	5f 42 03 00 	mov.b	&0x0003,r15	
    c360:	2f f3       	and	#2,	r15	;r3 As==10
    c362:	fc 27       	jz	$-6      	;abs 0xc35c
    __delay_cycles(1000);
    c364:	3f 40 4c 01 	mov	#332,	r15	;#0x014c
    c368:	1f 83       	dec	r15		
    c36a:	fe 23       	jnz	$-2      	;abs 0xc368
    c36c:	03 43       	nop			
    c36e:	03 43       	nop			
	UCA0TXBUF = UCA0RXBUF;                    // TX -> RXed character
    c370:	d2 42 66 00 	mov.b	&0x0066,&0x0067	
    c374:	67 00 
	P1OUT|=BIT0;
    c376:	d2 d3 21 00 	bis.b	#1,	&0x0021	;r3 As==01
    __delay_cycles(1000);
    c37a:	3f 40 4c 01 	mov	#332,	r15	;#0x014c
    c37e:	1f 83       	dec	r15		
    c380:	fe 23       	jnz	$-2      	;abs 0xc37e
    c382:	03 43       	nop			
    c384:	03 43       	nop			
    P1OUT^=BIT0;
    c386:	d2 e3 21 00 	xor.b	#1,	&0x0021	;r3 As==01
}
    c38a:	3f 41       	pop	r15		
    c38c:	00 13       	reti			

0000c38e <__udivsi3>:
    c38e:	0b 12       	push	r11		
    c390:	0a 12       	push	r10		
    c392:	09 12       	push	r9		
    c394:	79 40 20 00 	mov.b	#32,	r9	;#0x0020
    c398:	0a 4c       	mov	r12,	r10	
    c39a:	0b 4d       	mov	r13,	r11	
    c39c:	0c 43       	clr	r12		
    c39e:	0d 43       	clr	r13		
    c3a0:	0e 5e       	rla	r14		
    c3a2:	0f 6f       	rlc	r15		
    c3a4:	0c 6c       	rlc	r12		
    c3a6:	0d 6d       	rlc	r13		
    c3a8:	0d 9b       	cmp	r11,	r13	
    c3aa:	06 28       	jnc	$+14     	;abs 0xc3b8
    c3ac:	02 20       	jnz	$+6      	;abs 0xc3b2
    c3ae:	0c 9a       	cmp	r10,	r12	
    c3b0:	03 28       	jnc	$+8      	;abs 0xc3b8
    c3b2:	0c 8a       	sub	r10,	r12	
    c3b4:	0d 7b       	subc	r11,	r13	
    c3b6:	1e d3       	bis	#1,	r14	;r3 As==01
    c3b8:	19 83       	dec	r9		
    c3ba:	f2 23       	jnz	$-26     	;abs 0xc3a0
    c3bc:	39 41       	pop	r9		
    c3be:	3a 41       	pop	r10		
    c3c0:	3b 41       	pop	r11		
    c3c2:	30 41       	ret			

0000c3c4 <__umodsi3>:
    c3c4:	b0 12 8e c3 	call	#0xc38e	
    c3c8:	0e 4c       	mov	r12,	r14	
    c3ca:	0f 4d       	mov	r13,	r15	
    c3cc:	30 41       	ret			

0000c3ce <__fixunssfsi>:
    c3ce:	0b 12       	push	r11		
    c3d0:	0a 12       	push	r10		
    c3d2:	0a 4e       	mov	r14,	r10	
    c3d4:	0b 4f       	mov	r15,	r11	
    c3d6:	0c 43       	clr	r12		
    c3d8:	3d 40 00 4f 	mov	#20224,	r13	;#0x4f00
    c3dc:	b0 12 62 c9 	call	#0xc962	
    c3e0:	0f 93       	tst	r15		
    c3e2:	07 34       	jge	$+16     	;abs 0xc3f2
    c3e4:	0e 4a       	mov	r10,	r14	
    c3e6:	0f 4b       	mov	r11,	r15	
    c3e8:	b0 12 02 ca 	call	#0xca02	
    c3ec:	3a 41       	pop	r10		
    c3ee:	3b 41       	pop	r11		
    c3f0:	30 41       	ret			
    c3f2:	0c 43       	clr	r12		
    c3f4:	3d 40 00 4f 	mov	#20224,	r13	;#0x4f00
    c3f8:	0e 4a       	mov	r10,	r14	
    c3fa:	0f 4b       	mov	r11,	r15	
    c3fc:	b0 12 ee c6 	call	#0xc6ee	
    c400:	b0 12 02 ca 	call	#0xca02	
    c404:	0e 53       	add	#0,	r14	;r3 As==00
    c406:	3f 60 00 80 	addc	#-32768,r15	;#0x8000
    c40a:	3a 41       	pop	r10		
    c40c:	3b 41       	pop	r11		
    c40e:	30 41       	ret			

0000c410 <_fpadd_parts>:
    c410:	0b 12       	push	r11		
    c412:	0a 12       	push	r10		
    c414:	09 12       	push	r9		
    c416:	08 12       	push	r8		
    c418:	07 12       	push	r7		
    c41a:	06 12       	push	r6		
    c41c:	05 12       	push	r5		
    c41e:	04 12       	push	r4		
    c420:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    c424:	08 4d       	mov	r13,	r8	
    c426:	6b 4f       	mov.b	@r15,	r11	
    c428:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    c42a:	67 28       	jnc	$+208    	;abs 0xc4fa
    c42c:	6c 4e       	mov.b	@r14,	r12	
    c42e:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    c430:	e9 28       	jnc	$+468    	;abs 0xc604
    c432:	6b 92       	cmp.b	#4,	r11	;r2 As==10
    c434:	02 20       	jnz	$+6      	;abs 0xc43a
    c436:	30 40 90 c6 	br	#0xc690	
    c43a:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    c43c:	e3 24       	jz	$+456    	;abs 0xc604
    c43e:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    c440:	bb 24       	jz	$+376    	;abs 0xc5b8
    c442:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    c444:	df 24       	jz	$+448    	;abs 0xc604
    c446:	91 4f 02 00 	mov	2(r15),	0(r1)	;0x0002(r15), 0x0000(r1)
    c44a:	00 00 
    c44c:	1b 4e 02 00 	mov	2(r14),	r11	;0x0002(r14)
    c450:	14 4f 04 00 	mov	4(r15),	r4	;0x0004(r15)
    c454:	15 4f 06 00 	mov	6(r15),	r5	;0x0006(r15)
    c458:	16 4e 04 00 	mov	4(r14),	r6	;0x0004(r14)
    c45c:	17 4e 06 00 	mov	6(r14),	r7	;0x0006(r14)
    c460:	2c 41       	mov	@r1,	r12	
    c462:	0c 8b       	sub	r11,	r12	
    c464:	09 4c       	mov	r12,	r9	
    c466:	0c 93       	tst	r12		
    c468:	bf 38       	jl	$+384    	;abs 0xc5e8
    c46a:	39 90 20 00 	cmp	#32,	r9	;#0x0020
    c46e:	50 34       	jge	$+162    	;abs 0xc510
    c470:	1c 93       	cmp	#1,	r12	;r3 As==01
    c472:	d7 38       	jl	$+432    	;abs 0xc622
    c474:	81 46 02 00 	mov	r6,	2(r1)	;0x0002(r1)
    c478:	81 47 04 00 	mov	r7,	4(r1)	;0x0004(r1)
    c47c:	4c 49       	mov.b	r9,	r12	
    c47e:	7c f0 1f 00 	and.b	#31,	r12	;#0x001f
    c482:	0b 24       	jz	$+24     	;abs 0xc49a
    c484:	0a 46       	mov	r6,	r10	
    c486:	0b 47       	mov	r7,	r11	
    c488:	12 c3       	clrc			
    c48a:	0b 10       	rrc	r11		
    c48c:	0a 10       	rrc	r10		
    c48e:	7c 53       	add.b	#-1,	r12	;r3 As==11
    c490:	fb 23       	jnz	$-8      	;abs 0xc488
    c492:	81 4a 02 00 	mov	r10,	2(r1)	;0x0002(r1)
    c496:	81 4b 04 00 	mov	r11,	4(r1)	;0x0004(r1)
    c49a:	1c 43       	mov	#1,	r12	;r3 As==01
    c49c:	0d 43       	clr	r13		
    c49e:	79 f0 1f 00 	and.b	#31,	r9	;#0x001f
    c4a2:	04 24       	jz	$+10     	;abs 0xc4ac
    c4a4:	0c 5c       	rla	r12		
    c4a6:	0d 6d       	rlc	r13		
    c4a8:	79 53       	add.b	#-1,	r9	;r3 As==11
    c4aa:	fc 23       	jnz	$-6      	;abs 0xc4a4
    c4ac:	3c 53       	add	#-1,	r12	;r3 As==11
    c4ae:	3d 63       	addc	#-1,	r13	;r3 As==11
    c4b0:	0c f6       	and	r6,	r12	
    c4b2:	0d f7       	and	r7,	r13	
    c4b4:	1a 43       	mov	#1,	r10	;r3 As==01
    c4b6:	0b 43       	clr	r11		
    c4b8:	0c 93       	tst	r12		
    c4ba:	02 20       	jnz	$+6      	;abs 0xc4c0
    c4bc:	0d 93       	tst	r13		
    c4be:	e5 24       	jz	$+460    	;abs 0xc68a
    c4c0:	16 41 02 00 	mov	2(r1),	r6	;0x0002(r1)
    c4c4:	17 41 04 00 	mov	4(r1),	r7	;0x0004(r1)
    c4c8:	06 da       	bis	r10,	r6	
    c4ca:	07 db       	bis	r11,	r7	
    c4cc:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    c4d0:	5f 9e 01 00 	cmp.b	1(r14),	r15	;0x0001(r14)
    c4d4:	28 20       	jnz	$+82     	;abs 0xc526
    c4d6:	c8 4f 01 00 	mov.b	r15,	1(r8)	;0x0001(r8)
    c4da:	a8 41 02 00 	mov	@r1,	2(r8)	;0x0002(r8)
    c4de:	0e 46       	mov	r6,	r14	
    c4e0:	0f 47       	mov	r7,	r15	
    c4e2:	0e 54       	add	r4,	r14	
    c4e4:	0f 65       	addc	r5,	r15	
    c4e6:	88 4e 04 00 	mov	r14,	4(r8)	;0x0004(r8)
    c4ea:	88 4f 06 00 	mov	r15,	6(r8)	;0x0006(r8)
    c4ee:	f8 40 03 00 	mov.b	#3,	0(r8)	;#0x0003, 0x0000(r8)
    c4f2:	00 00 
    c4f4:	0f 93       	tst	r15		
    c4f6:	4d 38       	jl	$+156    	;abs 0xc592
    c4f8:	0f 48       	mov	r8,	r15	
    c4fa:	31 50 06 00 	add	#6,	r1	;#0x0006
    c4fe:	34 41       	pop	r4		
    c500:	35 41       	pop	r5		
    c502:	36 41       	pop	r6		
    c504:	37 41       	pop	r7		
    c506:	38 41       	pop	r8		
    c508:	39 41       	pop	r9		
    c50a:	3a 41       	pop	r10		
    c50c:	3b 41       	pop	r11		
    c50e:	30 41       	ret			
    c510:	2b 91       	cmp	@r1,	r11	
    c512:	67 38       	jl	$+208    	;abs 0xc5e2
    c514:	81 4b 00 00 	mov	r11,	0(r1)	;0x0000(r1)
    c518:	04 43       	clr	r4		
    c51a:	05 43       	clr	r5		
    c51c:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    c520:	5f 9e 01 00 	cmp.b	1(r14),	r15	;0x0001(r14)
    c524:	d8 27       	jz	$-78     	;abs 0xc4d6
    c526:	4f 93       	tst.b	r15		
    c528:	68 24       	jz	$+210    	;abs 0xc5fa
    c52a:	0e 46       	mov	r6,	r14	
    c52c:	0f 47       	mov	r7,	r15	
    c52e:	0e 84       	sub	r4,	r14	
    c530:	0f 75       	subc	r5,	r15	
    c532:	0f 93       	tst	r15		
    c534:	69 38       	jl	$+212    	;abs 0xc608
    c536:	c8 43 01 00 	mov.b	#0,	1(r8)	;r3 As==00, 0x0001(r8)
    c53a:	a8 41 02 00 	mov	@r1,	2(r8)	;0x0002(r8)
    c53e:	88 4e 04 00 	mov	r14,	4(r8)	;0x0004(r8)
    c542:	88 4f 06 00 	mov	r15,	6(r8)	;0x0006(r8)
    c546:	0c 4e       	mov	r14,	r12	
    c548:	0d 4f       	mov	r15,	r13	
    c54a:	3c 53       	add	#-1,	r12	;r3 As==11
    c54c:	3d 63       	addc	#-1,	r13	;r3 As==11
    c54e:	3d 90 ff 3f 	cmp	#16383,	r13	;#0x3fff
    c552:	05 28       	jnc	$+12     	;abs 0xc55e
    c554:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    c558:	17 2c       	jc	$+48     	;abs 0xc588
    c55a:	3c 93       	cmp	#-1,	r12	;r3 As==11
    c55c:	15 2c       	jc	$+44     	;abs 0xc588
    c55e:	1b 48 02 00 	mov	2(r8),	r11	;0x0002(r8)
    c562:	3b 53       	add	#-1,	r11	;r3 As==11
    c564:	0e 5e       	rla	r14		
    c566:	0f 6f       	rlc	r15		
    c568:	0a 4b       	mov	r11,	r10	
    c56a:	3b 53       	add	#-1,	r11	;r3 As==11
    c56c:	0c 4e       	mov	r14,	r12	
    c56e:	0d 4f       	mov	r15,	r13	
    c570:	3c 53       	add	#-1,	r12	;r3 As==11
    c572:	3d 63       	addc	#-1,	r13	;r3 As==11
    c574:	3d 90 ff 3f 	cmp	#16383,	r13	;#0x3fff
    c578:	f5 2b       	jnc	$-20     	;abs 0xc564
    c57a:	3c 24       	jz	$+122    	;abs 0xc5f4
    c57c:	88 4e 04 00 	mov	r14,	4(r8)	;0x0004(r8)
    c580:	88 4f 06 00 	mov	r15,	6(r8)	;0x0006(r8)
    c584:	88 4a 02 00 	mov	r10,	2(r8)	;0x0002(r8)
    c588:	f8 40 03 00 	mov.b	#3,	0(r8)	;#0x0003, 0x0000(r8)
    c58c:	00 00 
    c58e:	0f 93       	tst	r15		
    c590:	b3 37       	jge	$-152    	;abs 0xc4f8
    c592:	0c 4e       	mov	r14,	r12	
    c594:	0d 4f       	mov	r15,	r13	
    c596:	1c f3       	and	#1,	r12	;r3 As==01
    c598:	0d f3       	and	#0,	r13	;r3 As==00
    c59a:	12 c3       	clrc			
    c59c:	0f 10       	rrc	r15		
    c59e:	0e 10       	rrc	r14		
    c5a0:	0a 4c       	mov	r12,	r10	
    c5a2:	0b 4d       	mov	r13,	r11	
    c5a4:	0a de       	bis	r14,	r10	
    c5a6:	0b df       	bis	r15,	r11	
    c5a8:	88 4a 04 00 	mov	r10,	4(r8)	;0x0004(r8)
    c5ac:	88 4b 06 00 	mov	r11,	6(r8)	;0x0006(r8)
    c5b0:	98 53 02 00 	inc	2(r8)		;0x0002(r8)
    c5b4:	0f 48       	mov	r8,	r15	
    c5b6:	a1 3f       	jmp	$-188    	;abs 0xc4fa
    c5b8:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    c5ba:	9f 23       	jnz	$-192    	;abs 0xc4fa
    c5bc:	ad 4f 00 00 	mov	@r15,	0(r13)	;0x0000(r13)
    c5c0:	9d 4f 02 00 	mov	2(r15),	2(r13)	;0x0002(r15), 0x0002(r13)
    c5c4:	02 00 
    c5c6:	9d 4f 04 00 	mov	4(r15),	4(r13)	;0x0004(r15), 0x0004(r13)
    c5ca:	04 00 
    c5cc:	9d 4f 06 00 	mov	6(r15),	6(r13)	;0x0006(r15), 0x0006(r13)
    c5d0:	06 00 
    c5d2:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    c5d6:	5e ff 01 00 	and.b	1(r15),	r14	;0x0001(r15)
    c5da:	cd 4e 01 00 	mov.b	r14,	1(r13)	;0x0001(r13)
    c5de:	0f 4d       	mov	r13,	r15	
    c5e0:	8c 3f       	jmp	$-230    	;abs 0xc4fa
    c5e2:	06 43       	clr	r6		
    c5e4:	07 43       	clr	r7		
    c5e6:	9a 3f       	jmp	$-202    	;abs 0xc51c
    c5e8:	39 e3       	inv	r9		
    c5ea:	19 53       	inc	r9		
    c5ec:	39 90 20 00 	cmp	#32,	r9	;#0x0020
    c5f0:	8f 37       	jge	$-224    	;abs 0xc510
    c5f2:	3e 3f       	jmp	$-386    	;abs 0xc470
    c5f4:	3c 93       	cmp	#-1,	r12	;r3 As==11
    c5f6:	b6 2b       	jnc	$-146    	;abs 0xc564
    c5f8:	c1 3f       	jmp	$-124    	;abs 0xc57c
    c5fa:	0e 44       	mov	r4,	r14	
    c5fc:	0f 45       	mov	r5,	r15	
    c5fe:	0e 86       	sub	r6,	r14	
    c600:	0f 77       	subc	r7,	r15	
    c602:	97 3f       	jmp	$-208    	;abs 0xc532
    c604:	0f 4e       	mov	r14,	r15	
    c606:	79 3f       	jmp	$-268    	;abs 0xc4fa
    c608:	d8 43 01 00 	mov.b	#1,	1(r8)	;r3 As==01, 0x0001(r8)
    c60c:	a8 41 02 00 	mov	@r1,	2(r8)	;0x0002(r8)
    c610:	3e e3       	inv	r14		
    c612:	3f e3       	inv	r15		
    c614:	1e 53       	inc	r14		
    c616:	0f 63       	adc	r15		
    c618:	88 4e 04 00 	mov	r14,	4(r8)	;0x0004(r8)
    c61c:	88 4f 06 00 	mov	r15,	6(r8)	;0x0006(r8)
    c620:	92 3f       	jmp	$-218    	;abs 0xc546
    c622:	0c 93       	tst	r12		
    c624:	7b 27       	jz	$-264    	;abs 0xc51c
    c626:	81 59 00 00 	add	r9,	0(r1)	;0x0000(r1)
    c62a:	81 44 02 00 	mov	r4,	2(r1)	;0x0002(r1)
    c62e:	81 45 04 00 	mov	r5,	4(r1)	;0x0004(r1)
    c632:	4d 49       	mov.b	r9,	r13	
    c634:	7d f0 1f 00 	and.b	#31,	r13	;#0x001f
    c638:	0c 24       	jz	$+26     	;abs 0xc652
    c63a:	4b 4d       	mov.b	r13,	r11	
    c63c:	0c 44       	mov	r4,	r12	
    c63e:	0d 45       	mov	r5,	r13	
    c640:	12 c3       	clrc			
    c642:	0d 10       	rrc	r13		
    c644:	0c 10       	rrc	r12		
    c646:	7b 53       	add.b	#-1,	r11	;r3 As==11
    c648:	fb 23       	jnz	$-8      	;abs 0xc640
    c64a:	81 4c 02 00 	mov	r12,	2(r1)	;0x0002(r1)
    c64e:	81 4d 04 00 	mov	r13,	4(r1)	;0x0004(r1)
    c652:	1c 43       	mov	#1,	r12	;r3 As==01
    c654:	0d 43       	clr	r13		
    c656:	79 f0 1f 00 	and.b	#31,	r9	;#0x001f
    c65a:	04 24       	jz	$+10     	;abs 0xc664
    c65c:	0c 5c       	rla	r12		
    c65e:	0d 6d       	rlc	r13		
    c660:	79 53       	add.b	#-1,	r9	;r3 As==11
    c662:	fc 23       	jnz	$-6      	;abs 0xc65c
    c664:	3c 53       	add	#-1,	r12	;r3 As==11
    c666:	3d 63       	addc	#-1,	r13	;r3 As==11
    c668:	0c f4       	and	r4,	r12	
    c66a:	0d f5       	and	r5,	r13	
    c66c:	1a 43       	mov	#1,	r10	;r3 As==01
    c66e:	0b 43       	clr	r11		
    c670:	0c 93       	tst	r12		
    c672:	04 20       	jnz	$+10     	;abs 0xc67c
    c674:	0d 93       	tst	r13		
    c676:	02 20       	jnz	$+6      	;abs 0xc67c
    c678:	0a 43       	clr	r10		
    c67a:	0b 43       	clr	r11		
    c67c:	14 41 02 00 	mov	2(r1),	r4	;0x0002(r1)
    c680:	15 41 04 00 	mov	4(r1),	r5	;0x0004(r1)
    c684:	04 da       	bis	r10,	r4	
    c686:	05 db       	bis	r11,	r5	
    c688:	49 3f       	jmp	$-364    	;abs 0xc51c
    c68a:	0a 43       	clr	r10		
    c68c:	0b 43       	clr	r11		
    c68e:	18 3f       	jmp	$-462    	;abs 0xc4c0
    c690:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    c692:	33 23       	jnz	$-408    	;abs 0xc4fa
    c694:	df 9e 01 00 	cmp.b	1(r14),	1(r15)	;0x0001(r14), 0x0001(r15)
    c698:	01 00 
    c69a:	2f 27       	jz	$-416    	;abs 0xc4fa
    c69c:	3f 40 a2 cf 	mov	#-12382,r15	;#0xcfa2
    c6a0:	2c 3f       	jmp	$-422    	;abs 0xc4fa

0000c6a2 <__addsf3>:
    c6a2:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
    c6a6:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    c6aa:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    c6ae:	81 4c 00 00 	mov	r12,	0(r1)	;0x0000(r1)
    c6b2:	81 4d 02 00 	mov	r13,	2(r1)	;0x0002(r1)
    c6b6:	0e 41       	mov	r1,	r14	
    c6b8:	3e 50 18 00 	add	#24,	r14	;#0x0018
    c6bc:	0f 41       	mov	r1,	r15	
    c6be:	2f 52       	add	#4,	r15	;r2 As==10
    c6c0:	b0 12 c4 cd 	call	#0xcdc4	
    c6c4:	0e 41       	mov	r1,	r14	
    c6c6:	3e 50 10 00 	add	#16,	r14	;#0x0010
    c6ca:	0f 41       	mov	r1,	r15	
    c6cc:	b0 12 c4 cd 	call	#0xcdc4	
    c6d0:	0d 41       	mov	r1,	r13	
    c6d2:	3d 52       	add	#8,	r13	;r2 As==11
    c6d4:	0e 41       	mov	r1,	r14	
    c6d6:	3e 50 10 00 	add	#16,	r14	;#0x0010
    c6da:	0f 41       	mov	r1,	r15	
    c6dc:	3f 50 18 00 	add	#24,	r15	;#0x0018
    c6e0:	b0 12 10 c4 	call	#0xc410	
    c6e4:	b0 12 e6 cb 	call	#0xcbe6	
    c6e8:	31 50 20 00 	add	#32,	r1	;#0x0020
    c6ec:	30 41       	ret			

0000c6ee <__subsf3>:
    c6ee:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
    c6f2:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    c6f6:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    c6fa:	81 4c 00 00 	mov	r12,	0(r1)	;0x0000(r1)
    c6fe:	81 4d 02 00 	mov	r13,	2(r1)	;0x0002(r1)
    c702:	0e 41       	mov	r1,	r14	
    c704:	3e 50 18 00 	add	#24,	r14	;#0x0018
    c708:	0f 41       	mov	r1,	r15	
    c70a:	2f 52       	add	#4,	r15	;r2 As==10
    c70c:	b0 12 c4 cd 	call	#0xcdc4	
    c710:	0e 41       	mov	r1,	r14	
    c712:	3e 50 10 00 	add	#16,	r14	;#0x0010
    c716:	0f 41       	mov	r1,	r15	
    c718:	b0 12 c4 cd 	call	#0xcdc4	
    c71c:	d1 e3 11 00 	xor.b	#1,	17(r1)	;r3 As==01, 0x0011(r1)
    c720:	0d 41       	mov	r1,	r13	
    c722:	3d 52       	add	#8,	r13	;r2 As==11
    c724:	0e 41       	mov	r1,	r14	
    c726:	3e 50 10 00 	add	#16,	r14	;#0x0010
    c72a:	0f 41       	mov	r1,	r15	
    c72c:	3f 50 18 00 	add	#24,	r15	;#0x0018
    c730:	b0 12 10 c4 	call	#0xc410	
    c734:	b0 12 e6 cb 	call	#0xcbe6	
    c738:	31 50 20 00 	add	#32,	r1	;#0x0020
    c73c:	30 41       	ret			

0000c73e <__mulsf3>:
    c73e:	0b 12       	push	r11		
    c740:	0a 12       	push	r10		
    c742:	09 12       	push	r9		
    c744:	08 12       	push	r8		
    c746:	07 12       	push	r7		
    c748:	06 12       	push	r6		
    c74a:	05 12       	push	r5		
    c74c:	04 12       	push	r4		
    c74e:	31 50 dc ff 	add	#-36,	r1	;#0xffdc
    c752:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    c756:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    c75a:	81 4c 00 00 	mov	r12,	0(r1)	;0x0000(r1)
    c75e:	81 4d 02 00 	mov	r13,	2(r1)	;0x0002(r1)
    c762:	0e 41       	mov	r1,	r14	
    c764:	3e 50 18 00 	add	#24,	r14	;#0x0018
    c768:	0f 41       	mov	r1,	r15	
    c76a:	2f 52       	add	#4,	r15	;r2 As==10
    c76c:	b0 12 c4 cd 	call	#0xcdc4	
    c770:	0e 41       	mov	r1,	r14	
    c772:	3e 50 10 00 	add	#16,	r14	;#0x0010
    c776:	0f 41       	mov	r1,	r15	
    c778:	b0 12 c4 cd 	call	#0xcdc4	
    c77c:	5f 41 18 00 	mov.b	24(r1),	r15	;0x0018(r1)
    c780:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    c782:	b6 28       	jnc	$+366    	;abs 0xc8f0
    c784:	5e 41 10 00 	mov.b	16(r1),	r14	;0x0010(r1)
    c788:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    c78a:	d9 28       	jnc	$+436    	;abs 0xc93e
    c78c:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    c78e:	ae 24       	jz	$+350    	;abs 0xc8ec
    c790:	6e 92       	cmp.b	#4,	r14	;r2 As==10
    c792:	e2 24       	jz	$+454    	;abs 0xc958
    c794:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    c796:	ac 24       	jz	$+346    	;abs 0xc8f0
    c798:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    c79a:	d1 24       	jz	$+420    	;abs 0xc93e
    c79c:	14 41 1c 00 	mov	28(r1),	r4	;0x001c(r1)
    c7a0:	15 41 1e 00 	mov	30(r1),	r5	;0x001e(r1)
    c7a4:	18 41 14 00 	mov	20(r1),	r8	;0x0014(r1)
    c7a8:	19 41 16 00 	mov	22(r1),	r9	;0x0016(r1)
    c7ac:	3c 40 20 00 	mov	#32,	r12	;#0x0020
    c7b0:	0e 43       	clr	r14		
    c7b2:	0f 43       	clr	r15		
    c7b4:	06 43       	clr	r6		
    c7b6:	07 43       	clr	r7		
    c7b8:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    c7bc:	81 43 22 00 	mov	#0,	34(r1)	;r3 As==00, 0x0022(r1)
    c7c0:	0a 43       	clr	r10		
    c7c2:	0b 43       	clr	r11		
    c7c4:	81 4c 20 00 	mov	r12,	32(r1)	;0x0020(r1)
    c7c8:	08 3c       	jmp	$+18     	;abs 0xc7da
    c7ca:	08 58       	rla	r8		
    c7cc:	09 69       	rlc	r9		
    c7ce:	12 c3       	clrc			
    c7d0:	05 10       	rrc	r5		
    c7d2:	04 10       	rrc	r4		
    c7d4:	b1 53 20 00 	add	#-1,	32(r1)	;r3 As==11, 0x0020(r1)
    c7d8:	19 24       	jz	$+52     	;abs 0xc80c
    c7da:	14 b3       	bit	#1,	r4	;r3 As==01
    c7dc:	0d 24       	jz	$+28     	;abs 0xc7f8
    c7de:	0a 58       	add	r8,	r10	
    c7e0:	0b 69       	addc	r9,	r11	
    c7e2:	0e 56       	add	r6,	r14	
    c7e4:	0f 67       	addc	r7,	r15	
    c7e6:	1c 43       	mov	#1,	r12	;r3 As==01
    c7e8:	0d 43       	clr	r13		
    c7ea:	0b 99       	cmp	r9,	r11	
    c7ec:	03 28       	jnc	$+8      	;abs 0xc7f4
    c7ee:	0b 24       	jz	$+24     	;abs 0xc806
    c7f0:	0c 43       	clr	r12		
    c7f2:	0d 43       	clr	r13		
    c7f4:	0e 5c       	add	r12,	r14	
    c7f6:	0f 6d       	addc	r13,	r15	
    c7f8:	06 56       	rla	r6		
    c7fa:	07 67       	rlc	r7		
    c7fc:	09 93       	tst	r9		
    c7fe:	e5 37       	jge	$-52     	;abs 0xc7ca
    c800:	16 d3       	bis	#1,	r6	;r3 As==01
    c802:	07 d3       	bis	#0,	r7	;r3 As==00
    c804:	e2 3f       	jmp	$-58     	;abs 0xc7ca
    c806:	0a 98       	cmp	r8,	r10	
    c808:	f5 2b       	jnc	$-20     	;abs 0xc7f4
    c80a:	f2 3f       	jmp	$-26     	;abs 0xc7f0
    c80c:	81 4a 20 00 	mov	r10,	32(r1)	;0x0020(r1)
    c810:	81 4b 22 00 	mov	r11,	34(r1)	;0x0022(r1)
    c814:	0c 4f       	mov	r15,	r12	
    c816:	1a 41 1a 00 	mov	26(r1),	r10	;0x001a(r1)
    c81a:	1a 51 12 00 	add	18(r1),	r10	;0x0012(r1)
    c81e:	06 4a       	mov	r10,	r6	
    c820:	26 53       	incd	r6		
    c822:	81 46 0a 00 	mov	r6,	10(r1)	;0x000a(r1)
    c826:	5d 43       	mov.b	#1,	r13	;r3 As==01
    c828:	d1 91 11 00 	cmp.b	17(r1),	25(r1)	;0x0011(r1), 0x0019(r1)
    c82c:	19 00 
    c82e:	83 24       	jz	$+264    	;abs 0xc936
    c830:	c1 4d 09 00 	mov.b	r13,	9(r1)	;0x0009(r1)
    c834:	0c 93       	tst	r12		
    c836:	3c 38       	jl	$+122    	;abs 0xc8b0
    c838:	3f 90 00 40 	cmp	#16384,	r15	;#0x4000
    c83c:	18 2c       	jc	$+50     	;abs 0xc86e
    c83e:	1d 41 0a 00 	mov	10(r1),	r13	;0x000a(r1)
    c842:	3d 53       	add	#-1,	r13	;r3 As==11
    c844:	1a 41 20 00 	mov	32(r1),	r10	;0x0020(r1)
    c848:	1b 41 22 00 	mov	34(r1),	r11	;0x0022(r1)
    c84c:	0c 4d       	mov	r13,	r12	
    c84e:	0e 5e       	rla	r14		
    c850:	0f 6f       	rlc	r15		
    c852:	0b 93       	tst	r11		
    c854:	2a 38       	jl	$+86     	;abs 0xc8aa
    c856:	0a 5a       	rla	r10		
    c858:	0b 6b       	rlc	r11		
    c85a:	3d 53       	add	#-1,	r13	;r3 As==11
    c85c:	3f 90 00 40 	cmp	#16384,	r15	;#0x4000
    c860:	f5 2b       	jnc	$-20     	;abs 0xc84c
    c862:	81 4a 20 00 	mov	r10,	32(r1)	;0x0020(r1)
    c866:	81 4b 22 00 	mov	r11,	34(r1)	;0x0022(r1)
    c86a:	81 4c 0a 00 	mov	r12,	10(r1)	;0x000a(r1)
    c86e:	0c 4e       	mov	r14,	r12	
    c870:	0d 4f       	mov	r15,	r13	
    c872:	3c f0 7f 00 	and	#127,	r12	;#0x007f
    c876:	0d f3       	and	#0,	r13	;r3 As==00
    c878:	3c 90 40 00 	cmp	#64,	r12	;#0x0040
    c87c:	44 24       	jz	$+138    	;abs 0xc906
    c87e:	81 4e 0c 00 	mov	r14,	12(r1)	;0x000c(r1)
    c882:	81 4f 0e 00 	mov	r15,	14(r1)	;0x000e(r1)
    c886:	f1 40 03 00 	mov.b	#3,	8(r1)	;#0x0003, 0x0008(r1)
    c88a:	08 00 
    c88c:	0f 41       	mov	r1,	r15	
    c88e:	3f 52       	add	#8,	r15	;r2 As==11
    c890:	b0 12 e6 cb 	call	#0xcbe6	
    c894:	31 50 24 00 	add	#36,	r1	;#0x0024
    c898:	34 41       	pop	r4		
    c89a:	35 41       	pop	r5		
    c89c:	36 41       	pop	r6		
    c89e:	37 41       	pop	r7		
    c8a0:	38 41       	pop	r8		
    c8a2:	39 41       	pop	r9		
    c8a4:	3a 41       	pop	r10		
    c8a6:	3b 41       	pop	r11		
    c8a8:	30 41       	ret			
    c8aa:	1e d3       	bis	#1,	r14	;r3 As==01
    c8ac:	0f d3       	bis	#0,	r15	;r3 As==00
    c8ae:	d3 3f       	jmp	$-88     	;abs 0xc856
    c8b0:	3a 50 03 00 	add	#3,	r10	;#0x0003
    c8b4:	08 4a       	mov	r10,	r8	
    c8b6:	1e b3       	bit	#1,	r14	;r3 As==01
    c8b8:	10 24       	jz	$+34     	;abs 0xc8da
    c8ba:	1c 41 20 00 	mov	32(r1),	r12	;0x0020(r1)
    c8be:	1d 41 22 00 	mov	34(r1),	r13	;0x0022(r1)
    c8c2:	12 c3       	clrc			
    c8c4:	0d 10       	rrc	r13		
    c8c6:	0c 10       	rrc	r12		
    c8c8:	06 4c       	mov	r12,	r6	
    c8ca:	07 4d       	mov	r13,	r7	
    c8cc:	06 d3       	bis	#0,	r6	;r3 As==00
    c8ce:	37 d0 00 80 	bis	#-32768,r7	;#0x8000
    c8d2:	81 46 20 00 	mov	r6,	32(r1)	;0x0020(r1)
    c8d6:	81 47 22 00 	mov	r7,	34(r1)	;0x0022(r1)
    c8da:	12 c3       	clrc			
    c8dc:	0f 10       	rrc	r15		
    c8de:	0e 10       	rrc	r14		
    c8e0:	1a 53       	inc	r10		
    c8e2:	0f 93       	tst	r15		
    c8e4:	e7 3b       	jl	$-48     	;abs 0xc8b4
    c8e6:	81 48 0a 00 	mov	r8,	10(r1)	;0x000a(r1)
    c8ea:	a6 3f       	jmp	$-178    	;abs 0xc838
    c8ec:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    c8ee:	36 24       	jz	$+110    	;abs 0xc95c
    c8f0:	5f 43       	mov.b	#1,	r15	;r3 As==01
    c8f2:	d1 91 11 00 	cmp.b	17(r1),	25(r1)	;0x0011(r1), 0x0019(r1)
    c8f6:	19 00 
    c8f8:	20 24       	jz	$+66     	;abs 0xc93a
    c8fa:	c1 4f 19 00 	mov.b	r15,	25(r1)	;0x0019(r1)
    c8fe:	0f 41       	mov	r1,	r15	
    c900:	3f 50 18 00 	add	#24,	r15	;#0x0018
    c904:	c5 3f       	jmp	$-116    	;abs 0xc890
    c906:	0d 93       	tst	r13		
    c908:	ba 23       	jnz	$-138    	;abs 0xc87e
    c90a:	0c 4e       	mov	r14,	r12	
    c90c:	0d 4f       	mov	r15,	r13	
    c90e:	3c f0 80 00 	and	#128,	r12	;#0x0080
    c912:	0d f3       	and	#0,	r13	;r3 As==00
    c914:	0c 93       	tst	r12		
    c916:	b3 23       	jnz	$-152    	;abs 0xc87e
    c918:	0d 93       	tst	r13		
    c91a:	b1 23       	jnz	$-156    	;abs 0xc87e
    c91c:	81 93 20 00 	tst	32(r1)		;0x0020(r1)
    c920:	03 20       	jnz	$+8      	;abs 0xc928
    c922:	81 93 22 00 	tst	34(r1)		;0x0022(r1)
    c926:	ab 27       	jz	$-168    	;abs 0xc87e
    c928:	3e 50 40 00 	add	#64,	r14	;#0x0040
    c92c:	0f 63       	adc	r15		
    c92e:	3e f0 80 ff 	and	#-128,	r14	;#0xff80
    c932:	3f f3       	and	#-1,	r15	;r3 As==11
    c934:	a4 3f       	jmp	$-182    	;abs 0xc87e
    c936:	4d 43       	clr.b	r13		
    c938:	7b 3f       	jmp	$-264    	;abs 0xc830
    c93a:	4f 43       	clr.b	r15		
    c93c:	de 3f       	jmp	$-66     	;abs 0xc8fa
    c93e:	5f 43       	mov.b	#1,	r15	;r3 As==01
    c940:	d1 91 11 00 	cmp.b	17(r1),	25(r1)	;0x0011(r1), 0x0019(r1)
    c944:	19 00 
    c946:	06 24       	jz	$+14     	;abs 0xc954
    c948:	c1 4f 11 00 	mov.b	r15,	17(r1)	;0x0011(r1)
    c94c:	0f 41       	mov	r1,	r15	
    c94e:	3f 50 10 00 	add	#16,	r15	;#0x0010
    c952:	9e 3f       	jmp	$-194    	;abs 0xc890
    c954:	4f 43       	clr.b	r15		
    c956:	f8 3f       	jmp	$-14     	;abs 0xc948
    c958:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    c95a:	f1 23       	jnz	$-28     	;abs 0xc93e
    c95c:	3f 40 a2 cf 	mov	#-12382,r15	;#0xcfa2
    c960:	97 3f       	jmp	$-208    	;abs 0xc890

0000c962 <__gesf2>:
    c962:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    c966:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    c96a:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    c96e:	81 4c 00 00 	mov	r12,	0(r1)	;0x0000(r1)
    c972:	81 4d 02 00 	mov	r13,	2(r1)	;0x0002(r1)
    c976:	0e 41       	mov	r1,	r14	
    c978:	3e 50 10 00 	add	#16,	r14	;#0x0010
    c97c:	0f 41       	mov	r1,	r15	
    c97e:	2f 52       	add	#4,	r15	;r2 As==10
    c980:	b0 12 c4 cd 	call	#0xcdc4	
    c984:	0e 41       	mov	r1,	r14	
    c986:	3e 52       	add	#8,	r14	;r2 As==11
    c988:	0f 41       	mov	r1,	r15	
    c98a:	b0 12 c4 cd 	call	#0xcdc4	
    c98e:	e1 93 10 00 	cmp.b	#2,	16(r1)	;r3 As==10, 0x0010(r1)
    c992:	0d 28       	jnc	$+28     	;abs 0xc9ae
    c994:	e1 93 08 00 	cmp.b	#2,	8(r1)	;r3 As==10, 0x0008(r1)
    c998:	0a 28       	jnc	$+22     	;abs 0xc9ae
    c99a:	0e 41       	mov	r1,	r14	
    c99c:	3e 52       	add	#8,	r14	;r2 As==11
    c99e:	0f 41       	mov	r1,	r15	
    c9a0:	3f 50 10 00 	add	#16,	r15	;#0x0010
    c9a4:	b0 12 e8 ce 	call	#0xcee8	
    c9a8:	31 50 18 00 	add	#24,	r1	;#0x0018
    c9ac:	30 41       	ret			
    c9ae:	3f 43       	mov	#-1,	r15	;r3 As==11
    c9b0:	fb 3f       	jmp	$-8      	;abs 0xc9a8

0000c9b2 <__ltsf2>:
    c9b2:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    c9b6:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    c9ba:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    c9be:	81 4c 00 00 	mov	r12,	0(r1)	;0x0000(r1)
    c9c2:	81 4d 02 00 	mov	r13,	2(r1)	;0x0002(r1)
    c9c6:	0e 41       	mov	r1,	r14	
    c9c8:	3e 50 10 00 	add	#16,	r14	;#0x0010
    c9cc:	0f 41       	mov	r1,	r15	
    c9ce:	2f 52       	add	#4,	r15	;r2 As==10
    c9d0:	b0 12 c4 cd 	call	#0xcdc4	
    c9d4:	0e 41       	mov	r1,	r14	
    c9d6:	3e 52       	add	#8,	r14	;r2 As==11
    c9d8:	0f 41       	mov	r1,	r15	
    c9da:	b0 12 c4 cd 	call	#0xcdc4	
    c9de:	e1 93 10 00 	cmp.b	#2,	16(r1)	;r3 As==10, 0x0010(r1)
    c9e2:	0d 28       	jnc	$+28     	;abs 0xc9fe
    c9e4:	e1 93 08 00 	cmp.b	#2,	8(r1)	;r3 As==10, 0x0008(r1)
    c9e8:	0a 28       	jnc	$+22     	;abs 0xc9fe
    c9ea:	0e 41       	mov	r1,	r14	
    c9ec:	3e 52       	add	#8,	r14	;r2 As==11
    c9ee:	0f 41       	mov	r1,	r15	
    c9f0:	3f 50 10 00 	add	#16,	r15	;#0x0010
    c9f4:	b0 12 e8 ce 	call	#0xcee8	
    c9f8:	31 50 18 00 	add	#24,	r1	;#0x0018
    c9fc:	30 41       	ret			
    c9fe:	1f 43       	mov	#1,	r15	;r3 As==01
    ca00:	fb 3f       	jmp	$-8      	;abs 0xc9f8

0000ca02 <__fixsfsi>:
    ca02:	31 50 f4 ff 	add	#-12,	r1	;#0xfff4
    ca06:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    ca0a:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    ca0e:	0e 41       	mov	r1,	r14	
    ca10:	2e 52       	add	#4,	r14	;r2 As==10
    ca12:	0f 41       	mov	r1,	r15	
    ca14:	b0 12 c4 cd 	call	#0xcdc4	
    ca18:	5f 41 04 00 	mov.b	4(r1),	r15	;0x0004(r1)
    ca1c:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    ca1e:	28 24       	jz	$+82     	;abs 0xca70
    ca20:	27 28       	jnc	$+80     	;abs 0xca70
    ca22:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    ca24:	07 24       	jz	$+16     	;abs 0xca34
    ca26:	1d 41 06 00 	mov	6(r1),	r13	;0x0006(r1)
    ca2a:	0d 93       	tst	r13		
    ca2c:	21 38       	jl	$+68     	;abs 0xca70
    ca2e:	3d 90 1f 00 	cmp	#31,	r13	;#0x001f
    ca32:	09 38       	jl	$+20     	;abs 0xca46
    ca34:	c1 93 05 00 	tst.b	5(r1)		;0x0005(r1)
    ca38:	26 20       	jnz	$+78     	;abs 0xca86
    ca3a:	3e 43       	mov	#-1,	r14	;r3 As==11
    ca3c:	3f 40 ff 7f 	mov	#32767,	r15	;#0x7fff
    ca40:	31 50 0c 00 	add	#12,	r1	;#0x000c
    ca44:	30 41       	ret			
    ca46:	1e 41 08 00 	mov	8(r1),	r14	;0x0008(r1)
    ca4a:	1f 41 0a 00 	mov	10(r1),	r15	;0x000a(r1)
    ca4e:	3c 40 1e 00 	mov	#30,	r12	;#0x001e
    ca52:	4c 8d       	sub.b	r13,	r12	
    ca54:	4d 4c       	mov.b	r12,	r13	
    ca56:	7d f0 1f 00 	and.b	#31,	r13	;#0x001f
    ca5a:	0f 20       	jnz	$+32     	;abs 0xca7a
    ca5c:	c1 93 05 00 	tst.b	5(r1)		;0x0005(r1)
    ca60:	ef 27       	jz	$-32     	;abs 0xca40
    ca62:	3e e3       	inv	r14		
    ca64:	3f e3       	inv	r15		
    ca66:	1e 53       	inc	r14		
    ca68:	0f 63       	adc	r15		
    ca6a:	31 50 0c 00 	add	#12,	r1	;#0x000c
    ca6e:	30 41       	ret			
    ca70:	0e 43       	clr	r14		
    ca72:	0f 43       	clr	r15		
    ca74:	31 50 0c 00 	add	#12,	r1	;#0x000c
    ca78:	30 41       	ret			
    ca7a:	12 c3       	clrc			
    ca7c:	0f 10       	rrc	r15		
    ca7e:	0e 10       	rrc	r14		
    ca80:	7d 53       	add.b	#-1,	r13	;r3 As==11
    ca82:	fb 23       	jnz	$-8      	;abs 0xca7a
    ca84:	eb 3f       	jmp	$-40     	;abs 0xca5c
    ca86:	0e 43       	clr	r14		
    ca88:	3f 40 00 80 	mov	#-32768,r15	;#0x8000
    ca8c:	31 50 0c 00 	add	#12,	r1	;#0x000c
    ca90:	30 41       	ret			

0000ca92 <__floatunsisf>:
    ca92:	0b 12       	push	r11		
    ca94:	0a 12       	push	r10		
    ca96:	09 12       	push	r9		
    ca98:	08 12       	push	r8		
    ca9a:	31 82       	sub	#8,	r1	;r2 As==11
    ca9c:	0a 4e       	mov	r14,	r10	
    ca9e:	0b 4f       	mov	r15,	r11	
    caa0:	c1 43 01 00 	mov.b	#0,	1(r1)	;r3 As==00, 0x0001(r1)
    caa4:	0e 93       	tst	r14		
    caa6:	0d 20       	jnz	$+28     	;abs 0xcac2
    caa8:	0b 93       	tst	r11		
    caaa:	0b 20       	jnz	$+24     	;abs 0xcac2
    caac:	e1 43 00 00 	mov.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    cab0:	0f 41       	mov	r1,	r15	
    cab2:	b0 12 e6 cb 	call	#0xcbe6	
    cab6:	31 52       	add	#8,	r1	;r2 As==11
    cab8:	38 41       	pop	r8		
    caba:	39 41       	pop	r9		
    cabc:	3a 41       	pop	r10		
    cabe:	3b 41       	pop	r11		
    cac0:	30 41       	ret			
    cac2:	f1 40 03 00 	mov.b	#3,	0(r1)	;#0x0003, 0x0000(r1)
    cac6:	00 00 
    cac8:	b1 40 1e 00 	mov	#30,	2(r1)	;#0x001e, 0x0002(r1)
    cacc:	02 00 
    cace:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    cad2:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    cad6:	0e 4a       	mov	r10,	r14	
    cad8:	0f 4b       	mov	r11,	r15	
    cada:	b0 12 74 cb 	call	#0xcb74	
    cade:	3f 53       	add	#-1,	r15	;r3 As==11
    cae0:	0f 93       	tst	r15		
    cae2:	18 38       	jl	$+50     	;abs 0xcb14
    cae4:	e5 27       	jz	$-52     	;abs 0xcab0
    cae6:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    caea:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    caee:	4e 4f       	mov.b	r15,	r14	
    caf0:	7e f0 1f 00 	and.b	#31,	r14	;#0x001f
    caf4:	06 20       	jnz	$+14     	;abs 0xcb02
    caf6:	3e 40 1e 00 	mov	#30,	r14	;#0x001e
    cafa:	0e 8f       	sub	r15,	r14	
    cafc:	81 4e 02 00 	mov	r14,	2(r1)	;0x0002(r1)
    cb00:	d7 3f       	jmp	$-80     	;abs 0xcab0
    cb02:	91 51 04 00 	rla	4(r1)		;0x0004(r1)
    cb06:	04 00 
    cb08:	91 61 06 00 	rlc	6(r1)		;0x0006(r1)
    cb0c:	06 00 
    cb0e:	7e 53       	add.b	#-1,	r14	;r3 As==11
    cb10:	f8 23       	jnz	$-14     	;abs 0xcb02
    cb12:	f1 3f       	jmp	$-28     	;abs 0xcaf6
    cb14:	0e 4f       	mov	r15,	r14	
    cb16:	3e e3       	inv	r14		
    cb18:	1e 53       	inc	r14		
    cb1a:	1c 43       	mov	#1,	r12	;r3 As==01
    cb1c:	0d 43       	clr	r13		
    cb1e:	48 4e       	mov.b	r14,	r8	
    cb20:	78 f0 1f 00 	and.b	#31,	r8	;#0x001f
    cb24:	04 24       	jz	$+10     	;abs 0xcb2e
    cb26:	0c 5c       	rla	r12		
    cb28:	0d 6d       	rlc	r13		
    cb2a:	78 53       	add.b	#-1,	r8	;r3 As==11
    cb2c:	fc 23       	jnz	$-6      	;abs 0xcb26
    cb2e:	3c 53       	add	#-1,	r12	;r3 As==11
    cb30:	3d 63       	addc	#-1,	r13	;r3 As==11
    cb32:	0c fa       	and	r10,	r12	
    cb34:	0d fb       	and	r11,	r13	
    cb36:	18 43       	mov	#1,	r8	;r3 As==01
    cb38:	09 43       	clr	r9		
    cb3a:	0c 93       	tst	r12		
    cb3c:	04 20       	jnz	$+10     	;abs 0xcb46
    cb3e:	0d 93       	tst	r13		
    cb40:	02 20       	jnz	$+6      	;abs 0xcb46
    cb42:	08 43       	clr	r8		
    cb44:	09 43       	clr	r9		
    cb46:	7e f0 1f 00 	and.b	#31,	r14	;#0x001f
    cb4a:	0e 20       	jnz	$+30     	;abs 0xcb68
    cb4c:	0d 48       	mov	r8,	r13	
    cb4e:	0e 49       	mov	r9,	r14	
    cb50:	0d da       	bis	r10,	r13	
    cb52:	0e db       	bis	r11,	r14	
    cb54:	81 4d 04 00 	mov	r13,	4(r1)	;0x0004(r1)
    cb58:	81 4e 06 00 	mov	r14,	6(r1)	;0x0006(r1)
    cb5c:	3e 40 1e 00 	mov	#30,	r14	;#0x001e
    cb60:	0e 8f       	sub	r15,	r14	
    cb62:	81 4e 02 00 	mov	r14,	2(r1)	;0x0002(r1)
    cb66:	a4 3f       	jmp	$-182    	;abs 0xcab0
    cb68:	12 c3       	clrc			
    cb6a:	0b 10       	rrc	r11		
    cb6c:	0a 10       	rrc	r10		
    cb6e:	7e 53       	add.b	#-1,	r14	;r3 As==11
    cb70:	fb 23       	jnz	$-8      	;abs 0xcb68
    cb72:	ec 3f       	jmp	$-38     	;abs 0xcb4c

0000cb74 <__clzsi2>:
    cb74:	0b 12       	push	r11		
    cb76:	0a 12       	push	r10		
    cb78:	09 12       	push	r9		
    cb7a:	1f 93       	cmp	#1,	r15	;r3 As==01
    cb7c:	17 2c       	jc	$+48     	;abs 0xcbac
    cb7e:	3e 90 00 01 	cmp	#256,	r14	;#0x0100
    cb82:	2c 28       	jnc	$+90     	;abs 0xcbdc
    cb84:	3a 40 18 00 	mov	#24,	r10	;#0x0018
    cb88:	0b 43       	clr	r11		
    cb8a:	39 42       	mov	#8,	r9	;r2 As==11
    cb8c:	0c 4e       	mov	r14,	r12	
    cb8e:	0d 4f       	mov	r15,	r13	
    cb90:	4f 49       	mov.b	r9,	r15	
    cb92:	4f 93       	tst.b	r15		
    cb94:	17 20       	jnz	$+48     	;abs 0xcbc4
    cb96:	3c 50 aa cf 	add	#-12374,r12	;#0xcfaa
    cb9a:	6e 4c       	mov.b	@r12,	r14	
    cb9c:	0f 43       	clr	r15		
    cb9e:	0a 8e       	sub	r14,	r10	
    cba0:	0b 7f       	subc	r15,	r11	
    cba2:	0f 4a       	mov	r10,	r15	
    cba4:	39 41       	pop	r9		
    cba6:	3a 41       	pop	r10		
    cba8:	3b 41       	pop	r11		
    cbaa:	30 41       	ret			
    cbac:	3f 90 00 01 	cmp	#256,	r15	;#0x0100
    cbb0:	0f 28       	jnc	$+32     	;abs 0xcbd0
    cbb2:	3a 42       	mov	#8,	r10	;r2 As==11
    cbb4:	0b 43       	clr	r11		
    cbb6:	39 40 18 00 	mov	#24,	r9	;#0x0018
    cbba:	0c 4e       	mov	r14,	r12	
    cbbc:	0d 4f       	mov	r15,	r13	
    cbbe:	4f 49       	mov.b	r9,	r15	
    cbc0:	4f 93       	tst.b	r15		
    cbc2:	e9 27       	jz	$-44     	;abs 0xcb96
    cbc4:	12 c3       	clrc			
    cbc6:	0d 10       	rrc	r13		
    cbc8:	0c 10       	rrc	r12		
    cbca:	7f 53       	add.b	#-1,	r15	;r3 As==11
    cbcc:	fb 23       	jnz	$-8      	;abs 0xcbc4
    cbce:	e3 3f       	jmp	$-56     	;abs 0xcb96
    cbd0:	3a 40 10 00 	mov	#16,	r10	;#0x0010
    cbd4:	0b 43       	clr	r11		
    cbd6:	39 40 10 00 	mov	#16,	r9	;#0x0010
    cbda:	ef 3f       	jmp	$-32     	;abs 0xcbba
    cbdc:	3a 40 20 00 	mov	#32,	r10	;#0x0020
    cbe0:	0b 43       	clr	r11		
    cbe2:	09 43       	clr	r9		
    cbe4:	ea 3f       	jmp	$-42     	;abs 0xcbba

0000cbe6 <__pack_f>:
    cbe6:	0b 12       	push	r11		
    cbe8:	0a 12       	push	r10		
    cbea:	09 12       	push	r9		
    cbec:	08 12       	push	r8		
    cbee:	07 12       	push	r7		
    cbf0:	0d 4f       	mov	r15,	r13	
    cbf2:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    cbf6:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    cbfa:	5a 4d 01 00 	mov.b	1(r13),	r10	;0x0001(r13)
    cbfe:	6c 4d       	mov.b	@r13,	r12	
    cc00:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    cc02:	70 28       	jnc	$+226    	;abs 0xcce4
    cc04:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    cc06:	6a 24       	jz	$+214    	;abs 0xccdc
    cc08:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    cc0a:	36 24       	jz	$+110    	;abs 0xcc78
    cc0c:	0e 93       	tst	r14		
    cc0e:	32 24       	jz	$+102    	;abs 0xcc74
    cc10:	1b 4d 02 00 	mov	2(r13),	r11	;0x0002(r13)
    cc14:	3b 90 82 ff 	cmp	#-126,	r11	;#0xff82
    cc18:	6d 38       	jl	$+220    	;abs 0xccf4
    cc1a:	3b 90 80 00 	cmp	#128,	r11	;#0x0080
    cc1e:	5e 34       	jge	$+190    	;abs 0xccdc
    cc20:	0c 4e       	mov	r14,	r12	
    cc22:	0d 4f       	mov	r15,	r13	
    cc24:	3c f0 7f 00 	and	#127,	r12	;#0x007f
    cc28:	0d f3       	and	#0,	r13	;r3 As==00
    cc2a:	3c 90 40 00 	cmp	#64,	r12	;#0x0040
    cc2e:	40 24       	jz	$+130    	;abs 0xccb0
    cc30:	3e 50 3f 00 	add	#63,	r14	;#0x003f
    cc34:	0f 63       	adc	r15		
    cc36:	0f 93       	tst	r15		
    cc38:	4a 38       	jl	$+150    	;abs 0xccce
    cc3a:	0d 4b       	mov	r11,	r13	
    cc3c:	3d 50 7f 00 	add	#127,	r13	;#0x007f
    cc40:	12 c3       	clrc			
    cc42:	0f 10       	rrc	r15		
    cc44:	0e 10       	rrc	r14		
    cc46:	12 c3       	clrc			
    cc48:	0f 10       	rrc	r15		
    cc4a:	0e 10       	rrc	r14		
    cc4c:	12 c3       	clrc			
    cc4e:	0f 10       	rrc	r15		
    cc50:	0e 10       	rrc	r14		
    cc52:	12 c3       	clrc			
    cc54:	0f 10       	rrc	r15		
    cc56:	0e 10       	rrc	r14		
    cc58:	12 c3       	clrc			
    cc5a:	0f 10       	rrc	r15		
    cc5c:	0e 10       	rrc	r14		
    cc5e:	12 c3       	clrc			
    cc60:	0f 10       	rrc	r15		
    cc62:	0e 10       	rrc	r14		
    cc64:	12 c3       	clrc			
    cc66:	0f 10       	rrc	r15		
    cc68:	0e 10       	rrc	r14		
    cc6a:	3e f3       	and	#-1,	r14	;r3 As==11
    cc6c:	3f f0 7f 00 	and	#127,	r15	;#0x007f
    cc70:	4d 4d       	mov.b	r13,	r13	
    cc72:	05 3c       	jmp	$+12     	;abs 0xcc7e
    cc74:	0f 93       	tst	r15		
    cc76:	cc 23       	jnz	$-102    	;abs 0xcc10
    cc78:	4d 43       	clr.b	r13		
    cc7a:	0e 43       	clr	r14		
    cc7c:	0f 43       	clr	r15		
    cc7e:	4d 4d       	mov.b	r13,	r13	
    cc80:	0d 5d       	rla	r13		
    cc82:	0d 5d       	rla	r13		
    cc84:	0d 5d       	rla	r13		
    cc86:	0d 5d       	rla	r13		
    cc88:	0d 5d       	rla	r13		
    cc8a:	0d 5d       	rla	r13		
    cc8c:	0d 5d       	rla	r13		
    cc8e:	0c 4f       	mov	r15,	r12	
    cc90:	3c f0 7f 00 	and	#127,	r12	;#0x007f
    cc94:	0c dd       	bis	r13,	r12	
    cc96:	4f 4a       	mov.b	r10,	r15	
    cc98:	0f 11       	rra	r15		
    cc9a:	0f 43       	clr	r15		
    cc9c:	0f 10       	rrc	r15		
    cc9e:	0d 4c       	mov	r12,	r13	
    cca0:	0d df       	bis	r15,	r13	
    cca2:	0f 4d       	mov	r13,	r15	
    cca4:	37 41       	pop	r7		
    cca6:	38 41       	pop	r8		
    cca8:	39 41       	pop	r9		
    ccaa:	3a 41       	pop	r10		
    ccac:	3b 41       	pop	r11		
    ccae:	30 41       	ret			
    ccb0:	0d 93       	tst	r13		
    ccb2:	be 23       	jnz	$-130    	;abs 0xcc30
    ccb4:	0c 4e       	mov	r14,	r12	
    ccb6:	0d 4f       	mov	r15,	r13	
    ccb8:	3c f0 80 00 	and	#128,	r12	;#0x0080
    ccbc:	0d f3       	and	#0,	r13	;r3 As==00
    ccbe:	0c 93       	tst	r12		
    ccc0:	02 20       	jnz	$+6      	;abs 0xccc6
    ccc2:	0d 93       	tst	r13		
    ccc4:	b8 27       	jz	$-142    	;abs 0xcc36
    ccc6:	3e 50 40 00 	add	#64,	r14	;#0x0040
    ccca:	0f 63       	adc	r15		
    cccc:	b4 3f       	jmp	$-150    	;abs 0xcc36
    ccce:	12 c3       	clrc			
    ccd0:	0f 10       	rrc	r15		
    ccd2:	0e 10       	rrc	r14		
    ccd4:	0d 4b       	mov	r11,	r13	
    ccd6:	3d 50 80 00 	add	#128,	r13	;#0x0080
    ccda:	b2 3f       	jmp	$-154    	;abs 0xcc40
    ccdc:	7d 43       	mov.b	#-1,	r13	;r3 As==11
    ccde:	0e 43       	clr	r14		
    cce0:	0f 43       	clr	r15		
    cce2:	cd 3f       	jmp	$-100    	;abs 0xcc7e
    cce4:	0e d3       	bis	#0,	r14	;r3 As==00
    cce6:	3f d0 10 00 	bis	#16,	r15	;#0x0010
    ccea:	3e f3       	and	#-1,	r14	;r3 As==11
    ccec:	3f f0 7f 00 	and	#127,	r15	;#0x007f
    ccf0:	7d 43       	mov.b	#-1,	r13	;r3 As==11
    ccf2:	c5 3f       	jmp	$-116    	;abs 0xcc7e
    ccf4:	37 40 82 ff 	mov	#-126,	r7	;#0xff82
    ccf8:	07 8b       	sub	r11,	r7	
    ccfa:	37 90 1a 00 	cmp	#26,	r7	;#0x001a
    ccfe:	4f 34       	jge	$+160    	;abs 0xcd9e
    cd00:	0c 4e       	mov	r14,	r12	
    cd02:	0d 4f       	mov	r15,	r13	
    cd04:	4b 47       	mov.b	r7,	r11	
    cd06:	7b f0 1f 00 	and.b	#31,	r11	;#0x001f
    cd0a:	05 24       	jz	$+12     	;abs 0xcd16
    cd0c:	12 c3       	clrc			
    cd0e:	0d 10       	rrc	r13		
    cd10:	0c 10       	rrc	r12		
    cd12:	7b 53       	add.b	#-1,	r11	;r3 As==11
    cd14:	fb 23       	jnz	$-8      	;abs 0xcd0c
    cd16:	18 43       	mov	#1,	r8	;r3 As==01
    cd18:	09 43       	clr	r9		
    cd1a:	77 f0 1f 00 	and.b	#31,	r7	;#0x001f
    cd1e:	04 24       	jz	$+10     	;abs 0xcd28
    cd20:	08 58       	rla	r8		
    cd22:	09 69       	rlc	r9		
    cd24:	77 53       	add.b	#-1,	r7	;r3 As==11
    cd26:	fc 23       	jnz	$-6      	;abs 0xcd20
    cd28:	38 53       	add	#-1,	r8	;r3 As==11
    cd2a:	39 63       	addc	#-1,	r9	;r3 As==11
    cd2c:	08 fe       	and	r14,	r8	
    cd2e:	09 ff       	and	r15,	r9	
    cd30:	1e 43       	mov	#1,	r14	;r3 As==01
    cd32:	0f 43       	clr	r15		
    cd34:	08 93       	tst	r8		
    cd36:	04 20       	jnz	$+10     	;abs 0xcd40
    cd38:	09 93       	tst	r9		
    cd3a:	02 20       	jnz	$+6      	;abs 0xcd40
    cd3c:	0e 43       	clr	r14		
    cd3e:	0f 43       	clr	r15		
    cd40:	08 4e       	mov	r14,	r8	
    cd42:	09 4f       	mov	r15,	r9	
    cd44:	08 dc       	bis	r12,	r8	
    cd46:	09 dd       	bis	r13,	r9	
    cd48:	0e 48       	mov	r8,	r14	
    cd4a:	0f 49       	mov	r9,	r15	
    cd4c:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    cd50:	0f f3       	and	#0,	r15	;r3 As==00
    cd52:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    cd56:	26 24       	jz	$+78     	;abs 0xcda4
    cd58:	38 50 3f 00 	add	#63,	r8	;#0x003f
    cd5c:	09 63       	adc	r9		
    cd5e:	0e 48       	mov	r8,	r14	
    cd60:	0f 49       	mov	r9,	r15	
    cd62:	12 c3       	clrc			
    cd64:	0f 10       	rrc	r15		
    cd66:	0e 10       	rrc	r14		
    cd68:	12 c3       	clrc			
    cd6a:	0f 10       	rrc	r15		
    cd6c:	0e 10       	rrc	r14		
    cd6e:	12 c3       	clrc			
    cd70:	0f 10       	rrc	r15		
    cd72:	0e 10       	rrc	r14		
    cd74:	12 c3       	clrc			
    cd76:	0f 10       	rrc	r15		
    cd78:	0e 10       	rrc	r14		
    cd7a:	12 c3       	clrc			
    cd7c:	0f 10       	rrc	r15		
    cd7e:	0e 10       	rrc	r14		
    cd80:	12 c3       	clrc			
    cd82:	0f 10       	rrc	r15		
    cd84:	0e 10       	rrc	r14		
    cd86:	12 c3       	clrc			
    cd88:	0f 10       	rrc	r15		
    cd8a:	0e 10       	rrc	r14		
    cd8c:	3e f3       	and	#-1,	r14	;r3 As==11
    cd8e:	3f f0 7f 00 	and	#127,	r15	;#0x007f
    cd92:	5d 43       	mov.b	#1,	r13	;r3 As==01
    cd94:	39 90 00 40 	cmp	#16384,	r9	;#0x4000
    cd98:	72 2f       	jc	$-282    	;abs 0xcc7e
    cd9a:	4d 43       	clr.b	r13		
    cd9c:	70 3f       	jmp	$-286    	;abs 0xcc7e
    cd9e:	08 43       	clr	r8		
    cda0:	09 43       	clr	r9		
    cda2:	da 3f       	jmp	$-74     	;abs 0xcd58
    cda4:	0f 93       	tst	r15		
    cda6:	d8 23       	jnz	$-78     	;abs 0xcd58
    cda8:	0e 48       	mov	r8,	r14	
    cdaa:	0f 49       	mov	r9,	r15	
    cdac:	3e f0 80 00 	and	#128,	r14	;#0x0080
    cdb0:	0f f3       	and	#0,	r15	;r3 As==00
    cdb2:	0e 93       	tst	r14		
    cdb4:	04 24       	jz	$+10     	;abs 0xcdbe
    cdb6:	38 50 40 00 	add	#64,	r8	;#0x0040
    cdba:	09 63       	adc	r9		
    cdbc:	d0 3f       	jmp	$-94     	;abs 0xcd5e
    cdbe:	0f 93       	tst	r15		
    cdc0:	ce 27       	jz	$-98     	;abs 0xcd5e
    cdc2:	f9 3f       	jmp	$-12     	;abs 0xcdb6

0000cdc4 <__unpack_f>:
    cdc4:	0b 12       	push	r11		
    cdc6:	0a 12       	push	r10		
    cdc8:	2a 4f       	mov	@r15,	r10	
    cdca:	5b 4f 02 00 	mov.b	2(r15),	r11	;0x0002(r15)
    cdce:	3b f0 7f 00 	and	#127,	r11	;#0x007f
    cdd2:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    cdd6:	12 c3       	clrc			
    cdd8:	0d 10       	rrc	r13		
    cdda:	12 c3       	clrc			
    cddc:	0d 10       	rrc	r13		
    cdde:	12 c3       	clrc			
    cde0:	0d 10       	rrc	r13		
    cde2:	12 c3       	clrc			
    cde4:	0d 10       	rrc	r13		
    cde6:	12 c3       	clrc			
    cde8:	0d 10       	rrc	r13		
    cdea:	12 c3       	clrc			
    cdec:	0d 10       	rrc	r13		
    cdee:	12 c3       	clrc			
    cdf0:	0d 10       	rrc	r13		
    cdf2:	4d 4d       	mov.b	r13,	r13	
    cdf4:	5f 4f 03 00 	mov.b	3(r15),	r15	;0x0003(r15)
    cdf8:	3f b0 80 00 	bit	#128,	r15	;#0x0080
    cdfc:	0f 43       	clr	r15		
    cdfe:	0f 6f       	rlc	r15		
    ce00:	ce 4f 01 00 	mov.b	r15,	1(r14)	;0x0001(r14)
    ce04:	0d 93       	tst	r13		
    ce06:	2d 20       	jnz	$+92     	;abs 0xce62
    ce08:	0a 93       	tst	r10		
    ce0a:	51 24       	jz	$+164    	;abs 0xceae
    ce0c:	be 40 82 ff 	mov	#-126,	2(r14)	;#0xff82, 0x0002(r14)
    ce10:	02 00 
    ce12:	0c 4a       	mov	r10,	r12	
    ce14:	0d 4b       	mov	r11,	r13	
    ce16:	0c 5c       	rla	r12		
    ce18:	0d 6d       	rlc	r13		
    ce1a:	0c 5c       	rla	r12		
    ce1c:	0d 6d       	rlc	r13		
    ce1e:	0c 5c       	rla	r12		
    ce20:	0d 6d       	rlc	r13		
    ce22:	0c 5c       	rla	r12		
    ce24:	0d 6d       	rlc	r13		
    ce26:	0c 5c       	rla	r12		
    ce28:	0d 6d       	rlc	r13		
    ce2a:	0c 5c       	rla	r12		
    ce2c:	0d 6d       	rlc	r13		
    ce2e:	0c 5c       	rla	r12		
    ce30:	0d 6d       	rlc	r13		
    ce32:	fe 40 03 00 	mov.b	#3,	0(r14)	;#0x0003, 0x0000(r14)
    ce36:	00 00 
    ce38:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    ce3c:	0b 2c       	jc	$+24     	;abs 0xce54
    ce3e:	3f 40 81 ff 	mov	#-127,	r15	;#0xff81
    ce42:	0c 5c       	rla	r12		
    ce44:	0d 6d       	rlc	r13		
    ce46:	0a 4f       	mov	r15,	r10	
    ce48:	3f 53       	add	#-1,	r15	;r3 As==11
    ce4a:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    ce4e:	f9 2b       	jnc	$-12     	;abs 0xce42
    ce50:	8e 4a 02 00 	mov	r10,	2(r14)	;0x0002(r14)
    ce54:	8e 4c 04 00 	mov	r12,	4(r14)	;0x0004(r14)
    ce58:	8e 4d 06 00 	mov	r13,	6(r14)	;0x0006(r14)
    ce5c:	3a 41       	pop	r10		
    ce5e:	3b 41       	pop	r11		
    ce60:	30 41       	ret			
    ce62:	3d 90 ff 00 	cmp	#255,	r13	;#0x00ff
    ce66:	2a 24       	jz	$+86     	;abs 0xcebc
    ce68:	3d 50 81 ff 	add	#-127,	r13	;#0xff81
    ce6c:	8e 4d 02 00 	mov	r13,	2(r14)	;0x0002(r14)
    ce70:	fe 40 03 00 	mov.b	#3,	0(r14)	;#0x0003, 0x0000(r14)
    ce74:	00 00 
    ce76:	0c 4a       	mov	r10,	r12	
    ce78:	0d 4b       	mov	r11,	r13	
    ce7a:	0c 5c       	rla	r12		
    ce7c:	0d 6d       	rlc	r13		
    ce7e:	0c 5c       	rla	r12		
    ce80:	0d 6d       	rlc	r13		
    ce82:	0c 5c       	rla	r12		
    ce84:	0d 6d       	rlc	r13		
    ce86:	0c 5c       	rla	r12		
    ce88:	0d 6d       	rlc	r13		
    ce8a:	0c 5c       	rla	r12		
    ce8c:	0d 6d       	rlc	r13		
    ce8e:	0c 5c       	rla	r12		
    ce90:	0d 6d       	rlc	r13		
    ce92:	0c 5c       	rla	r12		
    ce94:	0d 6d       	rlc	r13		
    ce96:	0a 4c       	mov	r12,	r10	
    ce98:	0b 4d       	mov	r13,	r11	
    ce9a:	0a d3       	bis	#0,	r10	;r3 As==00
    ce9c:	3b d0 00 40 	bis	#16384,	r11	;#0x4000
    cea0:	8e 4a 04 00 	mov	r10,	4(r14)	;0x0004(r14)
    cea4:	8e 4b 06 00 	mov	r11,	6(r14)	;0x0006(r14)
    cea8:	3a 41       	pop	r10		
    ceaa:	3b 41       	pop	r11		
    ceac:	30 41       	ret			
    ceae:	0b 93       	tst	r11		
    ceb0:	ad 23       	jnz	$-164    	;abs 0xce0c
    ceb2:	ee 43 00 00 	mov.b	#2,	0(r14)	;r3 As==10, 0x0000(r14)
    ceb6:	3a 41       	pop	r10		
    ceb8:	3b 41       	pop	r11		
    ceba:	30 41       	ret			
    cebc:	0a 93       	tst	r10		
    cebe:	0c 24       	jz	$+26     	;abs 0xced8
    cec0:	0c 4a       	mov	r10,	r12	
    cec2:	0d 4b       	mov	r11,	r13	
    cec4:	0c f3       	and	#0,	r12	;r3 As==00
    cec6:	3d f0 10 00 	and	#16,	r13	;#0x0010
    ceca:	0c 93       	tst	r12		
    cecc:	02 20       	jnz	$+6      	;abs 0xced2
    cece:	0d 93       	tst	r13		
    ced0:	08 24       	jz	$+18     	;abs 0xcee2
    ced2:	de 43 00 00 	mov.b	#1,	0(r14)	;r3 As==01, 0x0000(r14)
    ced6:	e4 3f       	jmp	$-54     	;abs 0xcea0
    ced8:	0b 93       	tst	r11		
    ceda:	f2 23       	jnz	$-26     	;abs 0xcec0
    cedc:	ee 42 00 00 	mov.b	#4,	0(r14)	;r2 As==10, 0x0000(r14)
    cee0:	e3 3f       	jmp	$-56     	;abs 0xcea8
    cee2:	ce 43 00 00 	mov.b	#0,	0(r14)	;r3 As==00, 0x0000(r14)
    cee6:	dc 3f       	jmp	$-70     	;abs 0xcea0

0000cee8 <__fpcmp_parts_f>:
    cee8:	0b 12       	push	r11		
    ceea:	6d 4f       	mov.b	@r15,	r13	
    ceec:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    ceee:	12 28       	jnc	$+38     	;abs 0xcf14
    cef0:	6c 4e       	mov.b	@r14,	r12	
    cef2:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    cef4:	0f 28       	jnc	$+32     	;abs 0xcf14
    cef6:	6d 92       	cmp.b	#4,	r13	;r2 As==10
    cef8:	41 24       	jz	$+132    	;abs 0xcf7c
    cefa:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    cefc:	11 24       	jz	$+36     	;abs 0xcf20
    cefe:	6d 93       	cmp.b	#2,	r13	;r3 As==10
    cf00:	0d 24       	jz	$+28     	;abs 0xcf1c
    cf02:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    cf04:	14 24       	jz	$+42     	;abs 0xcf2e
    cf06:	5d 4f 01 00 	mov.b	1(r15),	r13	;0x0001(r15)
    cf0a:	5d 9e 01 00 	cmp.b	1(r14),	r13	;0x0001(r14)
    cf0e:	14 24       	jz	$+42     	;abs 0xcf38
    cf10:	4d 93       	tst.b	r13		
    cf12:	09 20       	jnz	$+20     	;abs 0xcf26
    cf14:	1e 43       	mov	#1,	r14	;r3 As==01
    cf16:	0f 4e       	mov	r14,	r15	
    cf18:	3b 41       	pop	r11		
    cf1a:	30 41       	ret			
    cf1c:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    cf1e:	28 24       	jz	$+82     	;abs 0xcf70
    cf20:	ce 93 01 00 	tst.b	1(r14)		;0x0001(r14)
    cf24:	f7 23       	jnz	$-16     	;abs 0xcf14
    cf26:	3e 43       	mov	#-1,	r14	;r3 As==11
    cf28:	0f 4e       	mov	r14,	r15	
    cf2a:	3b 41       	pop	r11		
    cf2c:	30 41       	ret			
    cf2e:	cf 93 01 00 	tst.b	1(r15)		;0x0001(r15)
    cf32:	f0 27       	jz	$-30     	;abs 0xcf14
    cf34:	3e 43       	mov	#-1,	r14	;r3 As==11
    cf36:	f8 3f       	jmp	$-14     	;abs 0xcf28
    cf38:	1b 4f 02 00 	mov	2(r15),	r11	;0x0002(r15)
    cf3c:	1c 4e 02 00 	mov	2(r14),	r12	;0x0002(r14)
    cf40:	0c 9b       	cmp	r11,	r12	
    cf42:	e6 3b       	jl	$-50     	;abs 0xcf10
    cf44:	0b 9c       	cmp	r12,	r11	
    cf46:	16 38       	jl	$+46     	;abs 0xcf74
    cf48:	1b 4f 04 00 	mov	4(r15),	r11	;0x0004(r15)
    cf4c:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    cf50:	1c 4e 04 00 	mov	4(r14),	r12	;0x0004(r14)
    cf54:	1e 4e 06 00 	mov	6(r14),	r14	;0x0006(r14)
    cf58:	0e 9f       	cmp	r15,	r14	
    cf5a:	da 2b       	jnc	$-74     	;abs 0xcf10
    cf5c:	0f 9e       	cmp	r14,	r15	
    cf5e:	02 28       	jnc	$+6      	;abs 0xcf64
    cf60:	0c 9b       	cmp	r11,	r12	
    cf62:	d6 2b       	jnc	$-82     	;abs 0xcf10
    cf64:	0f 9e       	cmp	r14,	r15	
    cf66:	06 28       	jnc	$+14     	;abs 0xcf74
    cf68:	0e 9f       	cmp	r15,	r14	
    cf6a:	02 28       	jnc	$+6      	;abs 0xcf70
    cf6c:	0b 9c       	cmp	r12,	r11	
    cf6e:	02 28       	jnc	$+6      	;abs 0xcf74
    cf70:	0e 43       	clr	r14		
    cf72:	d1 3f       	jmp	$-92     	;abs 0xcf16
    cf74:	4d 93       	tst.b	r13		
    cf76:	ce 23       	jnz	$-98     	;abs 0xcf14
    cf78:	3e 43       	mov	#-1,	r14	;r3 As==11
    cf7a:	d6 3f       	jmp	$-82     	;abs 0xcf28
    cf7c:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    cf7e:	d7 23       	jnz	$-80     	;abs 0xcf2e
    cf80:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    cf84:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    cf88:	0e 8f       	sub	r15,	r14	
    cf8a:	c5 3f       	jmp	$-116    	;abs 0xcf16

0000cf8c <_unexpected_>:
    cf8c:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	82 c0 82 c0 82 c0 82 c0 82 c0 82 c0 82 c0 5a c3     ..............Z.
    fff0:	82 c0 82 c0 82 c0 82 c0 82 c0 82 c0 82 c0 00 c0     ................
